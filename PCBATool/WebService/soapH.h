/* soapH.h
   Generated by gSOAP 2.8.31 for WebService.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = soap_new_std__string(soap);
	if (_p)
	{	soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckTimeGapResponse_DEFINED
#define SOAP_TYPE__ns1__CheckTimeGapResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTimeGapResponse(struct soap*, const char*, int, const _ns1__CheckTimeGapResponse *, const char*);
SOAP_FMAC3 _ns1__CheckTimeGapResponse * SOAP_FMAC4 soap_in__ns1__CheckTimeGapResponse(struct soap*, const char*, _ns1__CheckTimeGapResponse *, const char*);
SOAP_FMAC1 _ns1__CheckTimeGapResponse * SOAP_FMAC2 soap_instantiate__ns1__CheckTimeGapResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckTimeGapResponse * soap_new__ns1__CheckTimeGapResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckTimeGapResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckTimeGapResponse * soap_new_req__ns1__CheckTimeGapResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__CheckTimeGapResponse *_p = soap_new__ns1__CheckTimeGapResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckTimeGapResponse::out = out;
	}
	return _p;
}

inline _ns1__CheckTimeGapResponse * soap_new_set__ns1__CheckTimeGapResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__CheckTimeGapResponse *_p = soap_new__ns1__CheckTimeGapResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckTimeGapResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__CheckTimeGapResponse(struct soap *soap, _ns1__CheckTimeGapResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckTimeGapResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckTimeGapResponse * SOAP_FMAC4 soap_get__ns1__CheckTimeGapResponse(struct soap*, _ns1__CheckTimeGapResponse *, const char*, const char*);

inline int soap_read__ns1__CheckTimeGapResponse(struct soap *soap, _ns1__CheckTimeGapResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckTimeGapResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__CheckTimeGap_DEFINED
#define SOAP_TYPE__ns1__CheckTimeGap_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CheckTimeGap(struct soap*, const char*, int, const _ns1__CheckTimeGap *, const char*);
SOAP_FMAC3 _ns1__CheckTimeGap * SOAP_FMAC4 soap_in__ns1__CheckTimeGap(struct soap*, const char*, _ns1__CheckTimeGap *, const char*);
SOAP_FMAC1 _ns1__CheckTimeGap * SOAP_FMAC2 soap_instantiate__ns1__CheckTimeGap(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__CheckTimeGap * soap_new__ns1__CheckTimeGap(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__CheckTimeGap(soap, n, NULL, NULL, NULL);
}

inline _ns1__CheckTimeGap * soap_new_req__ns1__CheckTimeGap(
	struct soap *soap,
	std::string *in0)
{
	_ns1__CheckTimeGap *_p = soap_new__ns1__CheckTimeGap(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckTimeGap::in0 = in0;
	}
	return _p;
}

inline _ns1__CheckTimeGap * soap_new_set__ns1__CheckTimeGap(
	struct soap *soap,
	std::string *in0)
{
	_ns1__CheckTimeGap *_p = soap_new__ns1__CheckTimeGap(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__CheckTimeGap::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__CheckTimeGap(struct soap *soap, _ns1__CheckTimeGap const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:CheckTimeGap", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__CheckTimeGap * SOAP_FMAC4 soap_get__ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap *, const char*, const char*);

inline int soap_read__ns1__CheckTimeGap(struct soap *soap, _ns1__CheckTimeGap *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__CheckTimeGap(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__IspasspostburninResponse_DEFINED
#define SOAP_TYPE__ns1__IspasspostburninResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__IspasspostburninResponse(struct soap*, const char*, int, const _ns1__IspasspostburninResponse *, const char*);
SOAP_FMAC3 _ns1__IspasspostburninResponse * SOAP_FMAC4 soap_in__ns1__IspasspostburninResponse(struct soap*, const char*, _ns1__IspasspostburninResponse *, const char*);
SOAP_FMAC1 _ns1__IspasspostburninResponse * SOAP_FMAC2 soap_instantiate__ns1__IspasspostburninResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__IspasspostburninResponse * soap_new__ns1__IspasspostburninResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__IspasspostburninResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__IspasspostburninResponse * soap_new_req__ns1__IspasspostburninResponse(
	struct soap *soap,
	int out)
{
	_ns1__IspasspostburninResponse *_p = soap_new__ns1__IspasspostburninResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__IspasspostburninResponse::out = out;
	}
	return _p;
}

inline _ns1__IspasspostburninResponse * soap_new_set__ns1__IspasspostburninResponse(
	struct soap *soap,
	int out)
{
	_ns1__IspasspostburninResponse *_p = soap_new__ns1__IspasspostburninResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__IspasspostburninResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__IspasspostburninResponse(struct soap *soap, _ns1__IspasspostburninResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:IspasspostburninResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__IspasspostburninResponse * SOAP_FMAC4 soap_get__ns1__IspasspostburninResponse(struct soap*, _ns1__IspasspostburninResponse *, const char*, const char*);

inline int soap_read__ns1__IspasspostburninResponse(struct soap *soap, _ns1__IspasspostburninResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__IspasspostburninResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Ispasspostburnin_DEFINED
#define SOAP_TYPE__ns1__Ispasspostburnin_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Ispasspostburnin(struct soap*, const char*, int, const _ns1__Ispasspostburnin *, const char*);
SOAP_FMAC3 _ns1__Ispasspostburnin * SOAP_FMAC4 soap_in__ns1__Ispasspostburnin(struct soap*, const char*, _ns1__Ispasspostburnin *, const char*);
SOAP_FMAC1 _ns1__Ispasspostburnin * SOAP_FMAC2 soap_instantiate__ns1__Ispasspostburnin(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Ispasspostburnin * soap_new__ns1__Ispasspostburnin(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Ispasspostburnin(soap, n, NULL, NULL, NULL);
}

inline _ns1__Ispasspostburnin * soap_new_req__ns1__Ispasspostburnin(
	struct soap *soap,
	std::string *in0)
{
	_ns1__Ispasspostburnin *_p = soap_new__ns1__Ispasspostburnin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Ispasspostburnin::in0 = in0;
	}
	return _p;
}

inline _ns1__Ispasspostburnin * soap_new_set__ns1__Ispasspostburnin(
	struct soap *soap,
	std::string *in0)
{
	_ns1__Ispasspostburnin *_p = soap_new__ns1__Ispasspostburnin(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Ispasspostburnin::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__Ispasspostburnin(struct soap *soap, _ns1__Ispasspostburnin const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Ispasspostburnin", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Ispasspostburnin * SOAP_FMAC4 soap_get__ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin *, const char*, const char*);

inline int soap_read__ns1__Ispasspostburnin(struct soap *soap, _ns1__Ispasspostburnin *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__Ispasspostburnin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkingSNNextRouteResponse_DEFINED
#define SOAP_TYPE__ns1__checkingSNNextRouteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkingSNNextRouteResponse(struct soap*, const char*, int, const _ns1__checkingSNNextRouteResponse *, const char*);
SOAP_FMAC3 _ns1__checkingSNNextRouteResponse * SOAP_FMAC4 soap_in__ns1__checkingSNNextRouteResponse(struct soap*, const char*, _ns1__checkingSNNextRouteResponse *, const char*);
SOAP_FMAC1 _ns1__checkingSNNextRouteResponse * SOAP_FMAC2 soap_instantiate__ns1__checkingSNNextRouteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkingSNNextRouteResponse * soap_new__ns1__checkingSNNextRouteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkingSNNextRouteResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkingSNNextRouteResponse * soap_new_req__ns1__checkingSNNextRouteResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkingSNNextRouteResponse *_p = soap_new__ns1__checkingSNNextRouteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkingSNNextRouteResponse::out = out;
	}
	return _p;
}

inline _ns1__checkingSNNextRouteResponse * soap_new_set__ns1__checkingSNNextRouteResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkingSNNextRouteResponse *_p = soap_new__ns1__checkingSNNextRouteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkingSNNextRouteResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__checkingSNNextRouteResponse(struct soap *soap, _ns1__checkingSNNextRouteResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkingSNNextRouteResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkingSNNextRouteResponse * SOAP_FMAC4 soap_get__ns1__checkingSNNextRouteResponse(struct soap*, _ns1__checkingSNNextRouteResponse *, const char*, const char*);

inline int soap_read__ns1__checkingSNNextRouteResponse(struct soap *soap, _ns1__checkingSNNextRouteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkingSNNextRouteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkingSNNextRoute_DEFINED
#define SOAP_TYPE__ns1__checkingSNNextRoute_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkingSNNextRoute(struct soap*, const char*, int, const _ns1__checkingSNNextRoute *, const char*);
SOAP_FMAC3 _ns1__checkingSNNextRoute * SOAP_FMAC4 soap_in__ns1__checkingSNNextRoute(struct soap*, const char*, _ns1__checkingSNNextRoute *, const char*);
SOAP_FMAC1 _ns1__checkingSNNextRoute * SOAP_FMAC2 soap_instantiate__ns1__checkingSNNextRoute(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkingSNNextRoute * soap_new__ns1__checkingSNNextRoute(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkingSNNextRoute(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkingSNNextRoute * soap_new_req__ns1__checkingSNNextRoute(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkingSNNextRoute *_p = soap_new__ns1__checkingSNNextRoute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkingSNNextRoute::in0 = in0;
	}
	return _p;
}

inline _ns1__checkingSNNextRoute * soap_new_set__ns1__checkingSNNextRoute(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkingSNNextRoute *_p = soap_new__ns1__checkingSNNextRoute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkingSNNextRoute::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__checkingSNNextRoute(struct soap *soap, _ns1__checkingSNNextRoute const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkingSNNextRoute", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkingSNNextRoute * SOAP_FMAC4 soap_get__ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute *, const char*, const char*);

inline int soap_read__ns1__checkingSNNextRoute(struct soap *soap, _ns1__checkingSNNextRoute *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkingSNNextRoute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__blakeTestExchangeDataResponse_DEFINED
#define SOAP_TYPE__ns1__blakeTestExchangeDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__blakeTestExchangeDataResponse(struct soap*, const char*, int, const _ns1__blakeTestExchangeDataResponse *, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeDataResponse * SOAP_FMAC4 soap_in__ns1__blakeTestExchangeDataResponse(struct soap*, const char*, _ns1__blakeTestExchangeDataResponse *, const char*);
SOAP_FMAC1 _ns1__blakeTestExchangeDataResponse * SOAP_FMAC2 soap_instantiate__ns1__blakeTestExchangeDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__blakeTestExchangeDataResponse * soap_new__ns1__blakeTestExchangeDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__blakeTestExchangeDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__blakeTestExchangeDataResponse * soap_new_req__ns1__blakeTestExchangeDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__blakeTestExchangeDataResponse *_p = soap_new__ns1__blakeTestExchangeDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeDataResponse::out = out;
	}
	return _p;
}

inline _ns1__blakeTestExchangeDataResponse * soap_new_set__ns1__blakeTestExchangeDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__blakeTestExchangeDataResponse *_p = soap_new__ns1__blakeTestExchangeDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeDataResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__blakeTestExchangeDataResponse(struct soap *soap, _ns1__blakeTestExchangeDataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:blakeTestExchangeDataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__blakeTestExchangeDataResponse * SOAP_FMAC4 soap_get__ns1__blakeTestExchangeDataResponse(struct soap*, _ns1__blakeTestExchangeDataResponse *, const char*, const char*);

inline int soap_read__ns1__blakeTestExchangeDataResponse(struct soap *soap, _ns1__blakeTestExchangeDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__blakeTestExchangeDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__blakeTestExchangeData_DEFINED
#define SOAP_TYPE__ns1__blakeTestExchangeData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__blakeTestExchangeData(struct soap*, const char*, int, const _ns1__blakeTestExchangeData *, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeData * SOAP_FMAC4 soap_in__ns1__blakeTestExchangeData(struct soap*, const char*, _ns1__blakeTestExchangeData *, const char*);
SOAP_FMAC1 _ns1__blakeTestExchangeData * SOAP_FMAC2 soap_instantiate__ns1__blakeTestExchangeData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__blakeTestExchangeData * soap_new__ns1__blakeTestExchangeData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__blakeTestExchangeData(soap, n, NULL, NULL, NULL);
}

inline _ns1__blakeTestExchangeData * soap_new_req__ns1__blakeTestExchangeData(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__blakeTestExchangeData *_p = soap_new__ns1__blakeTestExchangeData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData::in0 = in0;
		_p->_ns1__blakeTestExchangeData::in1 = in1;
		_p->_ns1__blakeTestExchangeData::in2 = in2;
	}
	return _p;
}

inline _ns1__blakeTestExchangeData * soap_new_set__ns1__blakeTestExchangeData(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__blakeTestExchangeData *_p = soap_new__ns1__blakeTestExchangeData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData::in0 = in0;
		_p->_ns1__blakeTestExchangeData::in1 = in1;
		_p->_ns1__blakeTestExchangeData::in2 = in2;
	}
	return _p;
}

inline int soap_write__ns1__blakeTestExchangeData(struct soap *soap, _ns1__blakeTestExchangeData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:blakeTestExchangeData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__blakeTestExchangeData * SOAP_FMAC4 soap_get__ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData *, const char*, const char*);

inline int soap_read__ns1__blakeTestExchangeData(struct soap *soap, _ns1__blakeTestExchangeData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__blakeTestExchangeData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__goNewRouteseqResponse_DEFINED
#define SOAP_TYPE__ns1__goNewRouteseqResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__goNewRouteseqResponse(struct soap*, const char*, int, const _ns1__goNewRouteseqResponse *, const char*);
SOAP_FMAC3 _ns1__goNewRouteseqResponse * SOAP_FMAC4 soap_in__ns1__goNewRouteseqResponse(struct soap*, const char*, _ns1__goNewRouteseqResponse *, const char*);
SOAP_FMAC1 _ns1__goNewRouteseqResponse * SOAP_FMAC2 soap_instantiate__ns1__goNewRouteseqResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__goNewRouteseqResponse * soap_new__ns1__goNewRouteseqResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__goNewRouteseqResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__goNewRouteseqResponse * soap_new_req__ns1__goNewRouteseqResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__goNewRouteseqResponse *_p = soap_new__ns1__goNewRouteseqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__goNewRouteseqResponse::out = out;
	}
	return _p;
}

inline _ns1__goNewRouteseqResponse * soap_new_set__ns1__goNewRouteseqResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__goNewRouteseqResponse *_p = soap_new__ns1__goNewRouteseqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__goNewRouteseqResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__goNewRouteseqResponse(struct soap *soap, _ns1__goNewRouteseqResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:goNewRouteseqResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__goNewRouteseqResponse * SOAP_FMAC4 soap_get__ns1__goNewRouteseqResponse(struct soap*, _ns1__goNewRouteseqResponse *, const char*, const char*);

inline int soap_read__ns1__goNewRouteseqResponse(struct soap *soap, _ns1__goNewRouteseqResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__goNewRouteseqResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__goNewRouteseq_DEFINED
#define SOAP_TYPE__ns1__goNewRouteseq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__goNewRouteseq(struct soap*, const char*, int, const _ns1__goNewRouteseq *, const char*);
SOAP_FMAC3 _ns1__goNewRouteseq * SOAP_FMAC4 soap_in__ns1__goNewRouteseq(struct soap*, const char*, _ns1__goNewRouteseq *, const char*);
SOAP_FMAC1 _ns1__goNewRouteseq * SOAP_FMAC2 soap_instantiate__ns1__goNewRouteseq(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__goNewRouteseq * soap_new__ns1__goNewRouteseq(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__goNewRouteseq(soap, n, NULL, NULL, NULL);
}

inline _ns1__goNewRouteseq * soap_new_req__ns1__goNewRouteseq(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__goNewRouteseq *_p = soap_new__ns1__goNewRouteseq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__goNewRouteseq::in0 = in0;
		_p->_ns1__goNewRouteseq::in1 = in1;
		_p->_ns1__goNewRouteseq::in2 = in2;
	}
	return _p;
}

inline _ns1__goNewRouteseq * soap_new_set__ns1__goNewRouteseq(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__goNewRouteseq *_p = soap_new__ns1__goNewRouteseq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__goNewRouteseq::in0 = in0;
		_p->_ns1__goNewRouteseq::in1 = in1;
		_p->_ns1__goNewRouteseq::in2 = in2;
	}
	return _p;
}

inline int soap_write__ns1__goNewRouteseq(struct soap *soap, _ns1__goNewRouteseq const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:goNewRouteseq", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__goNewRouteseq * SOAP_FMAC4 soap_get__ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq *, const char*, const char*);

inline int soap_read__ns1__goNewRouteseq(struct soap *soap, _ns1__goNewRouteseq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__goNewRouteseq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__fetchSnCurrentLocationResponse_DEFINED
#define SOAP_TYPE__ns1__fetchSnCurrentLocationResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__fetchSnCurrentLocationResponse(struct soap*, const char*, int, const _ns1__fetchSnCurrentLocationResponse *, const char*);
SOAP_FMAC3 _ns1__fetchSnCurrentLocationResponse * SOAP_FMAC4 soap_in__ns1__fetchSnCurrentLocationResponse(struct soap*, const char*, _ns1__fetchSnCurrentLocationResponse *, const char*);
SOAP_FMAC1 _ns1__fetchSnCurrentLocationResponse * SOAP_FMAC2 soap_instantiate__ns1__fetchSnCurrentLocationResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__fetchSnCurrentLocationResponse * soap_new__ns1__fetchSnCurrentLocationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__fetchSnCurrentLocationResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__fetchSnCurrentLocationResponse * soap_new_req__ns1__fetchSnCurrentLocationResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__fetchSnCurrentLocationResponse *_p = soap_new__ns1__fetchSnCurrentLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__fetchSnCurrentLocationResponse::out = out;
	}
	return _p;
}

inline _ns1__fetchSnCurrentLocationResponse * soap_new_set__ns1__fetchSnCurrentLocationResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__fetchSnCurrentLocationResponse *_p = soap_new__ns1__fetchSnCurrentLocationResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__fetchSnCurrentLocationResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__fetchSnCurrentLocationResponse(struct soap *soap, _ns1__fetchSnCurrentLocationResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:fetchSnCurrentLocationResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__fetchSnCurrentLocationResponse * SOAP_FMAC4 soap_get__ns1__fetchSnCurrentLocationResponse(struct soap*, _ns1__fetchSnCurrentLocationResponse *, const char*, const char*);

inline int soap_read__ns1__fetchSnCurrentLocationResponse(struct soap *soap, _ns1__fetchSnCurrentLocationResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__fetchSnCurrentLocationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__fetchSnCurrentLocation_DEFINED
#define SOAP_TYPE__ns1__fetchSnCurrentLocation_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__fetchSnCurrentLocation(struct soap*, const char*, int, const _ns1__fetchSnCurrentLocation *, const char*);
SOAP_FMAC3 _ns1__fetchSnCurrentLocation * SOAP_FMAC4 soap_in__ns1__fetchSnCurrentLocation(struct soap*, const char*, _ns1__fetchSnCurrentLocation *, const char*);
SOAP_FMAC1 _ns1__fetchSnCurrentLocation * SOAP_FMAC2 soap_instantiate__ns1__fetchSnCurrentLocation(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__fetchSnCurrentLocation * soap_new__ns1__fetchSnCurrentLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__fetchSnCurrentLocation(soap, n, NULL, NULL, NULL);
}

inline _ns1__fetchSnCurrentLocation * soap_new_req__ns1__fetchSnCurrentLocation(
	struct soap *soap,
	std::string *in0)
{
	_ns1__fetchSnCurrentLocation *_p = soap_new__ns1__fetchSnCurrentLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__fetchSnCurrentLocation::in0 = in0;
	}
	return _p;
}

inline _ns1__fetchSnCurrentLocation * soap_new_set__ns1__fetchSnCurrentLocation(
	struct soap *soap,
	std::string *in0)
{
	_ns1__fetchSnCurrentLocation *_p = soap_new__ns1__fetchSnCurrentLocation(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__fetchSnCurrentLocation::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__fetchSnCurrentLocation(struct soap *soap, _ns1__fetchSnCurrentLocation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:fetchSnCurrentLocation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__fetchSnCurrentLocation * SOAP_FMAC4 soap_get__ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation *, const char*, const char*);

inline int soap_read__ns1__fetchSnCurrentLocation(struct soap *soap, _ns1__fetchSnCurrentLocation *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__fetchSnCurrentLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMaintanceParmResponse_DEFINED
#define SOAP_TYPE__ns1__getMaintanceParmResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMaintanceParmResponse(struct soap*, const char*, int, const _ns1__getMaintanceParmResponse *, const char*);
SOAP_FMAC3 _ns1__getMaintanceParmResponse * SOAP_FMAC4 soap_in__ns1__getMaintanceParmResponse(struct soap*, const char*, _ns1__getMaintanceParmResponse *, const char*);
SOAP_FMAC1 _ns1__getMaintanceParmResponse * SOAP_FMAC2 soap_instantiate__ns1__getMaintanceParmResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMaintanceParmResponse * soap_new__ns1__getMaintanceParmResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMaintanceParmResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMaintanceParmResponse * soap_new_req__ns1__getMaintanceParmResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__getMaintanceParmResponse *_p = soap_new__ns1__getMaintanceParmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMaintanceParmResponse::out = out;
	}
	return _p;
}

inline _ns1__getMaintanceParmResponse * soap_new_set__ns1__getMaintanceParmResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__getMaintanceParmResponse *_p = soap_new__ns1__getMaintanceParmResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMaintanceParmResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__getMaintanceParmResponse(struct soap *soap, _ns1__getMaintanceParmResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMaintanceParmResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMaintanceParmResponse * SOAP_FMAC4 soap_get__ns1__getMaintanceParmResponse(struct soap*, _ns1__getMaintanceParmResponse *, const char*, const char*);

inline int soap_read__ns1__getMaintanceParmResponse(struct soap *soap, _ns1__getMaintanceParmResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMaintanceParmResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getMaintanceParm_DEFINED
#define SOAP_TYPE__ns1__getMaintanceParm_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getMaintanceParm(struct soap*, const char*, int, const _ns1__getMaintanceParm *, const char*);
SOAP_FMAC3 _ns1__getMaintanceParm * SOAP_FMAC4 soap_in__ns1__getMaintanceParm(struct soap*, const char*, _ns1__getMaintanceParm *, const char*);
SOAP_FMAC1 _ns1__getMaintanceParm * SOAP_FMAC2 soap_instantiate__ns1__getMaintanceParm(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getMaintanceParm * soap_new__ns1__getMaintanceParm(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getMaintanceParm(soap, n, NULL, NULL, NULL);
}

inline _ns1__getMaintanceParm * soap_new_req__ns1__getMaintanceParm(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__getMaintanceParm *_p = soap_new__ns1__getMaintanceParm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMaintanceParm::in0 = in0;
		_p->_ns1__getMaintanceParm::in1 = in1;
		_p->_ns1__getMaintanceParm::in2 = in2;
	}
	return _p;
}

inline _ns1__getMaintanceParm * soap_new_set__ns1__getMaintanceParm(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__getMaintanceParm *_p = soap_new__ns1__getMaintanceParm(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getMaintanceParm::in0 = in0;
		_p->_ns1__getMaintanceParm::in1 = in1;
		_p->_ns1__getMaintanceParm::in2 = in2;
	}
	return _p;
}

inline int soap_write__ns1__getMaintanceParm(struct soap *soap, _ns1__getMaintanceParm const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getMaintanceParm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getMaintanceParm * SOAP_FMAC4 soap_get__ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm *, const char*, const char*);

inline int soap_read__ns1__getMaintanceParm(struct soap *soap, _ns1__getMaintanceParm *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getMaintanceParm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkMacResponse_DEFINED
#define SOAP_TYPE__ns1__checkMacResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkMacResponse(struct soap*, const char*, int, const _ns1__checkMacResponse *, const char*);
SOAP_FMAC3 _ns1__checkMacResponse * SOAP_FMAC4 soap_in__ns1__checkMacResponse(struct soap*, const char*, _ns1__checkMacResponse *, const char*);
SOAP_FMAC1 _ns1__checkMacResponse * SOAP_FMAC2 soap_instantiate__ns1__checkMacResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkMacResponse * soap_new__ns1__checkMacResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkMacResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkMacResponse * soap_new_req__ns1__checkMacResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkMacResponse *_p = soap_new__ns1__checkMacResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkMacResponse::out = out;
	}
	return _p;
}

inline _ns1__checkMacResponse * soap_new_set__ns1__checkMacResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkMacResponse *_p = soap_new__ns1__checkMacResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkMacResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__checkMacResponse(struct soap *soap, _ns1__checkMacResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkMacResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkMacResponse * SOAP_FMAC4 soap_get__ns1__checkMacResponse(struct soap*, _ns1__checkMacResponse *, const char*, const char*);

inline int soap_read__ns1__checkMacResponse(struct soap *soap, _ns1__checkMacResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkMacResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkMac_DEFINED
#define SOAP_TYPE__ns1__checkMac_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkMac(struct soap*, const char*, int, const _ns1__checkMac *, const char*);
SOAP_FMAC3 _ns1__checkMac * SOAP_FMAC4 soap_in__ns1__checkMac(struct soap*, const char*, _ns1__checkMac *, const char*);
SOAP_FMAC1 _ns1__checkMac * SOAP_FMAC2 soap_instantiate__ns1__checkMac(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkMac * soap_new__ns1__checkMac(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkMac(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkMac * soap_new_req__ns1__checkMac(
	struct soap *soap,
	std::string *in0,
	std::string *in1)
{
	_ns1__checkMac *_p = soap_new__ns1__checkMac(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkMac::in0 = in0;
		_p->_ns1__checkMac::in1 = in1;
	}
	return _p;
}

inline _ns1__checkMac * soap_new_set__ns1__checkMac(
	struct soap *soap,
	std::string *in0,
	std::string *in1)
{
	_ns1__checkMac *_p = soap_new__ns1__checkMac(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkMac::in0 = in0;
		_p->_ns1__checkMac::in1 = in1;
	}
	return _p;
}

inline int soap_write__ns1__checkMac(struct soap *soap, _ns1__checkMac const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkMac", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkMac * SOAP_FMAC4 soap_get__ns1__checkMac(struct soap*, _ns1__checkMac *, const char*, const char*);

inline int soap_read__ns1__checkMac(struct soap *soap, _ns1__checkMac *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkMac(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsertTimeControlResponse_DEFINED
#define SOAP_TYPE__ns1__InsertTimeControlResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsertTimeControlResponse(struct soap*, const char*, int, const _ns1__InsertTimeControlResponse *, const char*);
SOAP_FMAC3 _ns1__InsertTimeControlResponse * SOAP_FMAC4 soap_in__ns1__InsertTimeControlResponse(struct soap*, const char*, _ns1__InsertTimeControlResponse *, const char*);
SOAP_FMAC1 _ns1__InsertTimeControlResponse * SOAP_FMAC2 soap_instantiate__ns1__InsertTimeControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsertTimeControlResponse * soap_new__ns1__InsertTimeControlResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsertTimeControlResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsertTimeControlResponse * soap_new_req__ns1__InsertTimeControlResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__InsertTimeControlResponse *_p = soap_new__ns1__InsertTimeControlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertTimeControlResponse::out = out;
	}
	return _p;
}

inline _ns1__InsertTimeControlResponse * soap_new_set__ns1__InsertTimeControlResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__InsertTimeControlResponse *_p = soap_new__ns1__InsertTimeControlResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertTimeControlResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__InsertTimeControlResponse(struct soap *soap, _ns1__InsertTimeControlResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsertTimeControlResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsertTimeControlResponse * SOAP_FMAC4 soap_get__ns1__InsertTimeControlResponse(struct soap*, _ns1__InsertTimeControlResponse *, const char*, const char*);

inline int soap_read__ns1__InsertTimeControlResponse(struct soap *soap, _ns1__InsertTimeControlResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsertTimeControlResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsertTimeControl_DEFINED
#define SOAP_TYPE__ns1__InsertTimeControl_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsertTimeControl(struct soap*, const char*, int, const _ns1__InsertTimeControl *, const char*);
SOAP_FMAC3 _ns1__InsertTimeControl * SOAP_FMAC4 soap_in__ns1__InsertTimeControl(struct soap*, const char*, _ns1__InsertTimeControl *, const char*);
SOAP_FMAC1 _ns1__InsertTimeControl * SOAP_FMAC2 soap_instantiate__ns1__InsertTimeControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsertTimeControl * soap_new__ns1__InsertTimeControl(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsertTimeControl(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsertTimeControl * soap_new_req__ns1__InsertTimeControl(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5)
{
	_ns1__InsertTimeControl *_p = soap_new__ns1__InsertTimeControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertTimeControl::in0 = in0;
		_p->_ns1__InsertTimeControl::in1 = in1;
		_p->_ns1__InsertTimeControl::in2 = in2;
		_p->_ns1__InsertTimeControl::in3 = in3;
		_p->_ns1__InsertTimeControl::in4 = in4;
		_p->_ns1__InsertTimeControl::in5 = in5;
	}
	return _p;
}

inline _ns1__InsertTimeControl * soap_new_set__ns1__InsertTimeControl(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5)
{
	_ns1__InsertTimeControl *_p = soap_new__ns1__InsertTimeControl(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertTimeControl::in0 = in0;
		_p->_ns1__InsertTimeControl::in1 = in1;
		_p->_ns1__InsertTimeControl::in2 = in2;
		_p->_ns1__InsertTimeControl::in3 = in3;
		_p->_ns1__InsertTimeControl::in4 = in4;
		_p->_ns1__InsertTimeControl::in5 = in5;
	}
	return _p;
}

inline int soap_write__ns1__InsertTimeControl(struct soap *soap, _ns1__InsertTimeControl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsertTimeControl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsertTimeControl * SOAP_FMAC4 soap_get__ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl *, const char*, const char*);

inline int soap_read__ns1__InsertTimeControl(struct soap *soap, _ns1__InsertTimeControl *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsertTimeControl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__blakeTestExchangeData1Response_DEFINED
#define SOAP_TYPE__ns1__blakeTestExchangeData1Response_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__blakeTestExchangeData1Response(struct soap*, const char*, int, const _ns1__blakeTestExchangeData1Response *, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeData1Response * SOAP_FMAC4 soap_in__ns1__blakeTestExchangeData1Response(struct soap*, const char*, _ns1__blakeTestExchangeData1Response *, const char*);
SOAP_FMAC1 _ns1__blakeTestExchangeData1Response * SOAP_FMAC2 soap_instantiate__ns1__blakeTestExchangeData1Response(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__blakeTestExchangeData1Response * soap_new__ns1__blakeTestExchangeData1Response(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__blakeTestExchangeData1Response(soap, n, NULL, NULL, NULL);
}

inline _ns1__blakeTestExchangeData1Response * soap_new_req__ns1__blakeTestExchangeData1Response(
	struct soap *soap,
	std::string *out)
{
	_ns1__blakeTestExchangeData1Response *_p = soap_new__ns1__blakeTestExchangeData1Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData1Response::out = out;
	}
	return _p;
}

inline _ns1__blakeTestExchangeData1Response * soap_new_set__ns1__blakeTestExchangeData1Response(
	struct soap *soap,
	std::string *out)
{
	_ns1__blakeTestExchangeData1Response *_p = soap_new__ns1__blakeTestExchangeData1Response(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData1Response::out = out;
	}
	return _p;
}

inline int soap_write__ns1__blakeTestExchangeData1Response(struct soap *soap, _ns1__blakeTestExchangeData1Response const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:blakeTestExchangeData1Response", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__blakeTestExchangeData1Response * SOAP_FMAC4 soap_get__ns1__blakeTestExchangeData1Response(struct soap*, _ns1__blakeTestExchangeData1Response *, const char*, const char*);

inline int soap_read__ns1__blakeTestExchangeData1Response(struct soap *soap, _ns1__blakeTestExchangeData1Response *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__blakeTestExchangeData1Response(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__blakeTestExchangeData1_DEFINED
#define SOAP_TYPE__ns1__blakeTestExchangeData1_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__blakeTestExchangeData1(struct soap*, const char*, int, const _ns1__blakeTestExchangeData1 *, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeData1 * SOAP_FMAC4 soap_in__ns1__blakeTestExchangeData1(struct soap*, const char*, _ns1__blakeTestExchangeData1 *, const char*);
SOAP_FMAC1 _ns1__blakeTestExchangeData1 * SOAP_FMAC2 soap_instantiate__ns1__blakeTestExchangeData1(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__blakeTestExchangeData1 * soap_new__ns1__blakeTestExchangeData1(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__blakeTestExchangeData1(soap, n, NULL, NULL, NULL);
}

inline _ns1__blakeTestExchangeData1 * soap_new_req__ns1__blakeTestExchangeData1(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4)
{
	_ns1__blakeTestExchangeData1 *_p = soap_new__ns1__blakeTestExchangeData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData1::in0 = in0;
		_p->_ns1__blakeTestExchangeData1::in1 = in1;
		_p->_ns1__blakeTestExchangeData1::in2 = in2;
		_p->_ns1__blakeTestExchangeData1::in3 = in3;
		_p->_ns1__blakeTestExchangeData1::in4 = in4;
	}
	return _p;
}

inline _ns1__blakeTestExchangeData1 * soap_new_set__ns1__blakeTestExchangeData1(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4)
{
	_ns1__blakeTestExchangeData1 *_p = soap_new__ns1__blakeTestExchangeData1(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__blakeTestExchangeData1::in0 = in0;
		_p->_ns1__blakeTestExchangeData1::in1 = in1;
		_p->_ns1__blakeTestExchangeData1::in2 = in2;
		_p->_ns1__blakeTestExchangeData1::in3 = in3;
		_p->_ns1__blakeTestExchangeData1::in4 = in4;
	}
	return _p;
}

inline int soap_write__ns1__blakeTestExchangeData1(struct soap *soap, _ns1__blakeTestExchangeData1 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:blakeTestExchangeData1", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__blakeTestExchangeData1 * SOAP_FMAC4 soap_get__ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1 *, const char*, const char*);

inline int soap_read__ns1__blakeTestExchangeData1(struct soap *soap, _ns1__blakeTestExchangeData1 *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__blakeTestExchangeData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsertPRateDataResponse_DEFINED
#define SOAP_TYPE__ns1__InsertPRateDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsertPRateDataResponse(struct soap*, const char*, int, const _ns1__InsertPRateDataResponse *, const char*);
SOAP_FMAC3 _ns1__InsertPRateDataResponse * SOAP_FMAC4 soap_in__ns1__InsertPRateDataResponse(struct soap*, const char*, _ns1__InsertPRateDataResponse *, const char*);
SOAP_FMAC1 _ns1__InsertPRateDataResponse * SOAP_FMAC2 soap_instantiate__ns1__InsertPRateDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsertPRateDataResponse * soap_new__ns1__InsertPRateDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsertPRateDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsertPRateDataResponse * soap_new_req__ns1__InsertPRateDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__InsertPRateDataResponse *_p = soap_new__ns1__InsertPRateDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertPRateDataResponse::out = out;
	}
	return _p;
}

inline _ns1__InsertPRateDataResponse * soap_new_set__ns1__InsertPRateDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__InsertPRateDataResponse *_p = soap_new__ns1__InsertPRateDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertPRateDataResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__InsertPRateDataResponse(struct soap *soap, _ns1__InsertPRateDataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsertPRateDataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsertPRateDataResponse * SOAP_FMAC4 soap_get__ns1__InsertPRateDataResponse(struct soap*, _ns1__InsertPRateDataResponse *, const char*, const char*);

inline int soap_read__ns1__InsertPRateDataResponse(struct soap *soap, _ns1__InsertPRateDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsertPRateDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__InsertPRateData_DEFINED
#define SOAP_TYPE__ns1__InsertPRateData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__InsertPRateData(struct soap*, const char*, int, const _ns1__InsertPRateData *, const char*);
SOAP_FMAC3 _ns1__InsertPRateData * SOAP_FMAC4 soap_in__ns1__InsertPRateData(struct soap*, const char*, _ns1__InsertPRateData *, const char*);
SOAP_FMAC1 _ns1__InsertPRateData * SOAP_FMAC2 soap_instantiate__ns1__InsertPRateData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__InsertPRateData * soap_new__ns1__InsertPRateData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__InsertPRateData(soap, n, NULL, NULL, NULL);
}

inline _ns1__InsertPRateData * soap_new_req__ns1__InsertPRateData(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7,
	std::string *in8,
	std::string *in9,
	std::string *in10)
{
	_ns1__InsertPRateData *_p = soap_new__ns1__InsertPRateData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertPRateData::in0 = in0;
		_p->_ns1__InsertPRateData::in1 = in1;
		_p->_ns1__InsertPRateData::in2 = in2;
		_p->_ns1__InsertPRateData::in3 = in3;
		_p->_ns1__InsertPRateData::in4 = in4;
		_p->_ns1__InsertPRateData::in5 = in5;
		_p->_ns1__InsertPRateData::in6 = in6;
		_p->_ns1__InsertPRateData::in7 = in7;
		_p->_ns1__InsertPRateData::in8 = in8;
		_p->_ns1__InsertPRateData::in9 = in9;
		_p->_ns1__InsertPRateData::in10 = in10;
	}
	return _p;
}

inline _ns1__InsertPRateData * soap_new_set__ns1__InsertPRateData(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7,
	std::string *in8,
	std::string *in9,
	std::string *in10)
{
	_ns1__InsertPRateData *_p = soap_new__ns1__InsertPRateData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__InsertPRateData::in0 = in0;
		_p->_ns1__InsertPRateData::in1 = in1;
		_p->_ns1__InsertPRateData::in2 = in2;
		_p->_ns1__InsertPRateData::in3 = in3;
		_p->_ns1__InsertPRateData::in4 = in4;
		_p->_ns1__InsertPRateData::in5 = in5;
		_p->_ns1__InsertPRateData::in6 = in6;
		_p->_ns1__InsertPRateData::in7 = in7;
		_p->_ns1__InsertPRateData::in8 = in8;
		_p->_ns1__InsertPRateData::in9 = in9;
		_p->_ns1__InsertPRateData::in10 = in10;
	}
	return _p;
}

inline int soap_write__ns1__InsertPRateData(struct soap *soap, _ns1__InsertPRateData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:InsertPRateData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__InsertPRateData * SOAP_FMAC4 soap_get__ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData *, const char*, const char*);

inline int soap_read__ns1__InsertPRateData(struct soap *soap, _ns1__InsertPRateData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__InsertPRateData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getAssemblyDataResponse_DEFINED
#define SOAP_TYPE__ns1__getAssemblyDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAssemblyDataResponse(struct soap*, const char*, int, const _ns1__getAssemblyDataResponse *, const char*);
SOAP_FMAC3 _ns1__getAssemblyDataResponse * SOAP_FMAC4 soap_in__ns1__getAssemblyDataResponse(struct soap*, const char*, _ns1__getAssemblyDataResponse *, const char*);
SOAP_FMAC1 _ns1__getAssemblyDataResponse * SOAP_FMAC2 soap_instantiate__ns1__getAssemblyDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAssemblyDataResponse * soap_new__ns1__getAssemblyDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getAssemblyDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__getAssemblyDataResponse * soap_new_req__ns1__getAssemblyDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__getAssemblyDataResponse *_p = soap_new__ns1__getAssemblyDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAssemblyDataResponse::out = out;
	}
	return _p;
}

inline _ns1__getAssemblyDataResponse * soap_new_set__ns1__getAssemblyDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__getAssemblyDataResponse *_p = soap_new__ns1__getAssemblyDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAssemblyDataResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__getAssemblyDataResponse(struct soap *soap, _ns1__getAssemblyDataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAssemblyDataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getAssemblyDataResponse * SOAP_FMAC4 soap_get__ns1__getAssemblyDataResponse(struct soap*, _ns1__getAssemblyDataResponse *, const char*, const char*);

inline int soap_read__ns1__getAssemblyDataResponse(struct soap *soap, _ns1__getAssemblyDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getAssemblyDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__getAssemblyData_DEFINED
#define SOAP_TYPE__ns1__getAssemblyData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__getAssemblyData(struct soap*, const char*, int, const _ns1__getAssemblyData *, const char*);
SOAP_FMAC3 _ns1__getAssemblyData * SOAP_FMAC4 soap_in__ns1__getAssemblyData(struct soap*, const char*, _ns1__getAssemblyData *, const char*);
SOAP_FMAC1 _ns1__getAssemblyData * SOAP_FMAC2 soap_instantiate__ns1__getAssemblyData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__getAssemblyData * soap_new__ns1__getAssemblyData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__getAssemblyData(soap, n, NULL, NULL, NULL);
}

inline _ns1__getAssemblyData * soap_new_req__ns1__getAssemblyData(
	struct soap *soap,
	std::string *in0)
{
	_ns1__getAssemblyData *_p = soap_new__ns1__getAssemblyData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAssemblyData::in0 = in0;
	}
	return _p;
}

inline _ns1__getAssemblyData * soap_new_set__ns1__getAssemblyData(
	struct soap *soap,
	std::string *in0)
{
	_ns1__getAssemblyData *_p = soap_new__ns1__getAssemblyData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__getAssemblyData::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__getAssemblyData(struct soap *soap, _ns1__getAssemblyData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:getAssemblyData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__getAssemblyData * SOAP_FMAC4 soap_get__ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData *, const char*, const char*);

inline int soap_read__ns1__getAssemblyData(struct soap *soap, _ns1__getAssemblyData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__getAssemblyData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__staffCheckResponse_DEFINED
#define SOAP_TYPE__ns1__staffCheckResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__staffCheckResponse(struct soap*, const char*, int, const _ns1__staffCheckResponse *, const char*);
SOAP_FMAC3 _ns1__staffCheckResponse * SOAP_FMAC4 soap_in__ns1__staffCheckResponse(struct soap*, const char*, _ns1__staffCheckResponse *, const char*);
SOAP_FMAC1 _ns1__staffCheckResponse * SOAP_FMAC2 soap_instantiate__ns1__staffCheckResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__staffCheckResponse * soap_new__ns1__staffCheckResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__staffCheckResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__staffCheckResponse * soap_new_req__ns1__staffCheckResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__staffCheckResponse *_p = soap_new__ns1__staffCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__staffCheckResponse::out = out;
	}
	return _p;
}

inline _ns1__staffCheckResponse * soap_new_set__ns1__staffCheckResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__staffCheckResponse *_p = soap_new__ns1__staffCheckResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__staffCheckResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__staffCheckResponse(struct soap *soap, _ns1__staffCheckResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:staffCheckResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__staffCheckResponse * SOAP_FMAC4 soap_get__ns1__staffCheckResponse(struct soap*, _ns1__staffCheckResponse *, const char*, const char*);

inline int soap_read__ns1__staffCheckResponse(struct soap *soap, _ns1__staffCheckResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__staffCheckResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__staffCheck_DEFINED
#define SOAP_TYPE__ns1__staffCheck_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__staffCheck(struct soap*, const char*, int, const _ns1__staffCheck *, const char*);
SOAP_FMAC3 _ns1__staffCheck * SOAP_FMAC4 soap_in__ns1__staffCheck(struct soap*, const char*, _ns1__staffCheck *, const char*);
SOAP_FMAC1 _ns1__staffCheck * SOAP_FMAC2 soap_instantiate__ns1__staffCheck(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__staffCheck * soap_new__ns1__staffCheck(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__staffCheck(soap, n, NULL, NULL, NULL);
}

inline _ns1__staffCheck * soap_new_req__ns1__staffCheck(
	struct soap *soap,
	std::string *in0,
	std::string *in1)
{
	_ns1__staffCheck *_p = soap_new__ns1__staffCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__staffCheck::in0 = in0;
		_p->_ns1__staffCheck::in1 = in1;
	}
	return _p;
}

inline _ns1__staffCheck * soap_new_set__ns1__staffCheck(
	struct soap *soap,
	std::string *in0,
	std::string *in1)
{
	_ns1__staffCheck *_p = soap_new__ns1__staffCheck(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__staffCheck::in0 = in0;
		_p->_ns1__staffCheck::in1 = in1;
	}
	return _p;
}

inline int soap_write__ns1__staffCheck(struct soap *soap, _ns1__staffCheck const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:staffCheck", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__staffCheck * SOAP_FMAC4 soap_get__ns1__staffCheck(struct soap*, _ns1__staffCheck *, const char*, const char*);

inline int soap_read__ns1__staffCheck(struct soap *soap, _ns1__staffCheck *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__staffCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnSaveTechProcess_USCOREAResponse_DEFINED
#define SOAP_TYPE__ns1__SnSaveTechProcess_USCOREAResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, const char*, int, const _ns1__SnSaveTechProcess_USCOREAResponse *, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREAResponse * SOAP_FMAC4 soap_in__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, const char*, _ns1__SnSaveTechProcess_USCOREAResponse *, const char*);
SOAP_FMAC1 _ns1__SnSaveTechProcess_USCOREAResponse * SOAP_FMAC2 soap_instantiate__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnSaveTechProcess_USCOREAResponse * soap_new__ns1__SnSaveTechProcess_USCOREAResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnSaveTechProcess_USCOREAResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnSaveTechProcess_USCOREAResponse * soap_new_req__ns1__SnSaveTechProcess_USCOREAResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__SnSaveTechProcess_USCOREAResponse *_p = soap_new__ns1__SnSaveTechProcess_USCOREAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess_USCOREAResponse::out = out;
	}
	return _p;
}

inline _ns1__SnSaveTechProcess_USCOREAResponse * soap_new_set__ns1__SnSaveTechProcess_USCOREAResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__SnSaveTechProcess_USCOREAResponse *_p = soap_new__ns1__SnSaveTechProcess_USCOREAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess_USCOREAResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__SnSaveTechProcess_USCOREAResponse(struct soap *soap, _ns1__SnSaveTechProcess_USCOREAResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnSaveTechProcess_AResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREAResponse * SOAP_FMAC4 soap_get__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, _ns1__SnSaveTechProcess_USCOREAResponse *, const char*, const char*);

inline int soap_read__ns1__SnSaveTechProcess_USCOREAResponse(struct soap *soap, _ns1__SnSaveTechProcess_USCOREAResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnSaveTechProcess_USCOREAResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnSaveTechProcess_USCOREA_DEFINED
#define SOAP_TYPE__ns1__SnSaveTechProcess_USCOREA_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnSaveTechProcess_USCOREA(struct soap*, const char*, int, const _ns1__SnSaveTechProcess_USCOREA *, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC4 soap_in__ns1__SnSaveTechProcess_USCOREA(struct soap*, const char*, _ns1__SnSaveTechProcess_USCOREA *, const char*);
SOAP_FMAC1 _ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC2 soap_instantiate__ns1__SnSaveTechProcess_USCOREA(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnSaveTechProcess_USCOREA * soap_new__ns1__SnSaveTechProcess_USCOREA(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnSaveTechProcess_USCOREA(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnSaveTechProcess_USCOREA * soap_new_req__ns1__SnSaveTechProcess_USCOREA(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7,
	std::string *in8)
{
	_ns1__SnSaveTechProcess_USCOREA *_p = soap_new__ns1__SnSaveTechProcess_USCOREA(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess_USCOREA::in0 = in0;
		_p->_ns1__SnSaveTechProcess_USCOREA::in1 = in1;
		_p->_ns1__SnSaveTechProcess_USCOREA::in2 = in2;
		_p->_ns1__SnSaveTechProcess_USCOREA::in3 = in3;
		_p->_ns1__SnSaveTechProcess_USCOREA::in4 = in4;
		_p->_ns1__SnSaveTechProcess_USCOREA::in5 = in5;
		_p->_ns1__SnSaveTechProcess_USCOREA::in6 = in6;
		_p->_ns1__SnSaveTechProcess_USCOREA::in7 = in7;
		_p->_ns1__SnSaveTechProcess_USCOREA::in8 = in8;
	}
	return _p;
}

inline _ns1__SnSaveTechProcess_USCOREA * soap_new_set__ns1__SnSaveTechProcess_USCOREA(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7,
	std::string *in8)
{
	_ns1__SnSaveTechProcess_USCOREA *_p = soap_new__ns1__SnSaveTechProcess_USCOREA(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess_USCOREA::in0 = in0;
		_p->_ns1__SnSaveTechProcess_USCOREA::in1 = in1;
		_p->_ns1__SnSaveTechProcess_USCOREA::in2 = in2;
		_p->_ns1__SnSaveTechProcess_USCOREA::in3 = in3;
		_p->_ns1__SnSaveTechProcess_USCOREA::in4 = in4;
		_p->_ns1__SnSaveTechProcess_USCOREA::in5 = in5;
		_p->_ns1__SnSaveTechProcess_USCOREA::in6 = in6;
		_p->_ns1__SnSaveTechProcess_USCOREA::in7 = in7;
		_p->_ns1__SnSaveTechProcess_USCOREA::in8 = in8;
	}
	return _p;
}

inline int soap_write__ns1__SnSaveTechProcess_USCOREA(struct soap *soap, _ns1__SnSaveTechProcess_USCOREA const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnSaveTechProcess_A", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC4 soap_get__ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA *, const char*, const char*);

inline int soap_read__ns1__SnSaveTechProcess_USCOREA(struct soap *soap, _ns1__SnSaveTechProcess_USCOREA *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnSaveTechProcess_USCOREA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSNPangusOrderNoResponse_DEFINED
#define SOAP_TYPE__ns1__checkSNPangusOrderNoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSNPangusOrderNoResponse(struct soap*, const char*, int, const _ns1__checkSNPangusOrderNoResponse *, const char*);
SOAP_FMAC3 _ns1__checkSNPangusOrderNoResponse * SOAP_FMAC4 soap_in__ns1__checkSNPangusOrderNoResponse(struct soap*, const char*, _ns1__checkSNPangusOrderNoResponse *, const char*);
SOAP_FMAC1 _ns1__checkSNPangusOrderNoResponse * SOAP_FMAC2 soap_instantiate__ns1__checkSNPangusOrderNoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSNPangusOrderNoResponse * soap_new__ns1__checkSNPangusOrderNoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSNPangusOrderNoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSNPangusOrderNoResponse * soap_new_req__ns1__checkSNPangusOrderNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkSNPangusOrderNoResponse *_p = soap_new__ns1__checkSNPangusOrderNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNPangusOrderNoResponse::out = out;
	}
	return _p;
}

inline _ns1__checkSNPangusOrderNoResponse * soap_new_set__ns1__checkSNPangusOrderNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkSNPangusOrderNoResponse *_p = soap_new__ns1__checkSNPangusOrderNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNPangusOrderNoResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__checkSNPangusOrderNoResponse(struct soap *soap, _ns1__checkSNPangusOrderNoResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSNPangusOrderNoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSNPangusOrderNoResponse * SOAP_FMAC4 soap_get__ns1__checkSNPangusOrderNoResponse(struct soap*, _ns1__checkSNPangusOrderNoResponse *, const char*, const char*);

inline int soap_read__ns1__checkSNPangusOrderNoResponse(struct soap *soap, _ns1__checkSNPangusOrderNoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSNPangusOrderNoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSNPangusOrderNo_DEFINED
#define SOAP_TYPE__ns1__checkSNPangusOrderNo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSNPangusOrderNo(struct soap*, const char*, int, const _ns1__checkSNPangusOrderNo *, const char*);
SOAP_FMAC3 _ns1__checkSNPangusOrderNo * SOAP_FMAC4 soap_in__ns1__checkSNPangusOrderNo(struct soap*, const char*, _ns1__checkSNPangusOrderNo *, const char*);
SOAP_FMAC1 _ns1__checkSNPangusOrderNo * SOAP_FMAC2 soap_instantiate__ns1__checkSNPangusOrderNo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSNPangusOrderNo * soap_new__ns1__checkSNPangusOrderNo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSNPangusOrderNo(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSNPangusOrderNo * soap_new_req__ns1__checkSNPangusOrderNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkSNPangusOrderNo *_p = soap_new__ns1__checkSNPangusOrderNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNPangusOrderNo::in0 = in0;
	}
	return _p;
}

inline _ns1__checkSNPangusOrderNo * soap_new_set__ns1__checkSNPangusOrderNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkSNPangusOrderNo *_p = soap_new__ns1__checkSNPangusOrderNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNPangusOrderNo::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__checkSNPangusOrderNo(struct soap *soap, _ns1__checkSNPangusOrderNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSNPangusOrderNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSNPangusOrderNo * SOAP_FMAC4 soap_get__ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo *, const char*, const char*);

inline int soap_read__ns1__checkSNPangusOrderNo(struct soap *soap, _ns1__checkSNPangusOrderNo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSNPangusOrderNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSNOrderNoResponse_DEFINED
#define SOAP_TYPE__ns1__checkSNOrderNoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSNOrderNoResponse(struct soap*, const char*, int, const _ns1__checkSNOrderNoResponse *, const char*);
SOAP_FMAC3 _ns1__checkSNOrderNoResponse * SOAP_FMAC4 soap_in__ns1__checkSNOrderNoResponse(struct soap*, const char*, _ns1__checkSNOrderNoResponse *, const char*);
SOAP_FMAC1 _ns1__checkSNOrderNoResponse * SOAP_FMAC2 soap_instantiate__ns1__checkSNOrderNoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSNOrderNoResponse * soap_new__ns1__checkSNOrderNoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSNOrderNoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSNOrderNoResponse * soap_new_req__ns1__checkSNOrderNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkSNOrderNoResponse *_p = soap_new__ns1__checkSNOrderNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNOrderNoResponse::out = out;
	}
	return _p;
}

inline _ns1__checkSNOrderNoResponse * soap_new_set__ns1__checkSNOrderNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__checkSNOrderNoResponse *_p = soap_new__ns1__checkSNOrderNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNOrderNoResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__checkSNOrderNoResponse(struct soap *soap, _ns1__checkSNOrderNoResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSNOrderNoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSNOrderNoResponse * SOAP_FMAC4 soap_get__ns1__checkSNOrderNoResponse(struct soap*, _ns1__checkSNOrderNoResponse *, const char*, const char*);

inline int soap_read__ns1__checkSNOrderNoResponse(struct soap *soap, _ns1__checkSNOrderNoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSNOrderNoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__checkSNOrderNo_DEFINED
#define SOAP_TYPE__ns1__checkSNOrderNo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__checkSNOrderNo(struct soap*, const char*, int, const _ns1__checkSNOrderNo *, const char*);
SOAP_FMAC3 _ns1__checkSNOrderNo * SOAP_FMAC4 soap_in__ns1__checkSNOrderNo(struct soap*, const char*, _ns1__checkSNOrderNo *, const char*);
SOAP_FMAC1 _ns1__checkSNOrderNo * SOAP_FMAC2 soap_instantiate__ns1__checkSNOrderNo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__checkSNOrderNo * soap_new__ns1__checkSNOrderNo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__checkSNOrderNo(soap, n, NULL, NULL, NULL);
}

inline _ns1__checkSNOrderNo * soap_new_req__ns1__checkSNOrderNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkSNOrderNo *_p = soap_new__ns1__checkSNOrderNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNOrderNo::in0 = in0;
	}
	return _p;
}

inline _ns1__checkSNOrderNo * soap_new_set__ns1__checkSNOrderNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__checkSNOrderNo *_p = soap_new__ns1__checkSNOrderNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__checkSNOrderNo::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__checkSNOrderNo(struct soap *soap, _ns1__checkSNOrderNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:checkSNOrderNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__checkSNOrderNo * SOAP_FMAC4 soap_get__ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo *, const char*, const char*);

inline int soap_read__ns1__checkSNOrderNo(struct soap *soap, _ns1__checkSNOrderNo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__checkSNOrderNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__loadNgPanelNoResponse_DEFINED
#define SOAP_TYPE__ns1__loadNgPanelNoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loadNgPanelNoResponse(struct soap*, const char*, int, const _ns1__loadNgPanelNoResponse *, const char*);
SOAP_FMAC3 _ns1__loadNgPanelNoResponse * SOAP_FMAC4 soap_in__ns1__loadNgPanelNoResponse(struct soap*, const char*, _ns1__loadNgPanelNoResponse *, const char*);
SOAP_FMAC1 _ns1__loadNgPanelNoResponse * SOAP_FMAC2 soap_instantiate__ns1__loadNgPanelNoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loadNgPanelNoResponse * soap_new__ns1__loadNgPanelNoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loadNgPanelNoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__loadNgPanelNoResponse * soap_new_req__ns1__loadNgPanelNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__loadNgPanelNoResponse *_p = soap_new__ns1__loadNgPanelNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadNgPanelNoResponse::out = out;
	}
	return _p;
}

inline _ns1__loadNgPanelNoResponse * soap_new_set__ns1__loadNgPanelNoResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__loadNgPanelNoResponse *_p = soap_new__ns1__loadNgPanelNoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadNgPanelNoResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__loadNgPanelNoResponse(struct soap *soap, _ns1__loadNgPanelNoResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loadNgPanelNoResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loadNgPanelNoResponse * SOAP_FMAC4 soap_get__ns1__loadNgPanelNoResponse(struct soap*, _ns1__loadNgPanelNoResponse *, const char*, const char*);

inline int soap_read__ns1__loadNgPanelNoResponse(struct soap *soap, _ns1__loadNgPanelNoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__loadNgPanelNoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__loadNgPanelNo_DEFINED
#define SOAP_TYPE__ns1__loadNgPanelNo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loadNgPanelNo(struct soap*, const char*, int, const _ns1__loadNgPanelNo *, const char*);
SOAP_FMAC3 _ns1__loadNgPanelNo * SOAP_FMAC4 soap_in__ns1__loadNgPanelNo(struct soap*, const char*, _ns1__loadNgPanelNo *, const char*);
SOAP_FMAC1 _ns1__loadNgPanelNo * SOAP_FMAC2 soap_instantiate__ns1__loadNgPanelNo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loadNgPanelNo * soap_new__ns1__loadNgPanelNo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loadNgPanelNo(soap, n, NULL, NULL, NULL);
}

inline _ns1__loadNgPanelNo * soap_new_req__ns1__loadNgPanelNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__loadNgPanelNo *_p = soap_new__ns1__loadNgPanelNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadNgPanelNo::in0 = in0;
	}
	return _p;
}

inline _ns1__loadNgPanelNo * soap_new_set__ns1__loadNgPanelNo(
	struct soap *soap,
	std::string *in0)
{
	_ns1__loadNgPanelNo *_p = soap_new__ns1__loadNgPanelNo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadNgPanelNo::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__loadNgPanelNo(struct soap *soap, _ns1__loadNgPanelNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loadNgPanelNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loadNgPanelNo * SOAP_FMAC4 soap_get__ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo *, const char*, const char*);

inline int soap_read__ns1__loadNgPanelNo(struct soap *soap, _ns1__loadNgPanelNo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__loadNgPanelNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__loadTimeControlDataResponse_DEFINED
#define SOAP_TYPE__ns1__loadTimeControlDataResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loadTimeControlDataResponse(struct soap*, const char*, int, const _ns1__loadTimeControlDataResponse *, const char*);
SOAP_FMAC3 _ns1__loadTimeControlDataResponse * SOAP_FMAC4 soap_in__ns1__loadTimeControlDataResponse(struct soap*, const char*, _ns1__loadTimeControlDataResponse *, const char*);
SOAP_FMAC1 _ns1__loadTimeControlDataResponse * SOAP_FMAC2 soap_instantiate__ns1__loadTimeControlDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loadTimeControlDataResponse * soap_new__ns1__loadTimeControlDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loadTimeControlDataResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__loadTimeControlDataResponse * soap_new_req__ns1__loadTimeControlDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__loadTimeControlDataResponse *_p = soap_new__ns1__loadTimeControlDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadTimeControlDataResponse::out = out;
	}
	return _p;
}

inline _ns1__loadTimeControlDataResponse * soap_new_set__ns1__loadTimeControlDataResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__loadTimeControlDataResponse *_p = soap_new__ns1__loadTimeControlDataResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loadTimeControlDataResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__loadTimeControlDataResponse(struct soap *soap, _ns1__loadTimeControlDataResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loadTimeControlDataResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loadTimeControlDataResponse * SOAP_FMAC4 soap_get__ns1__loadTimeControlDataResponse(struct soap*, _ns1__loadTimeControlDataResponse *, const char*, const char*);

inline int soap_read__ns1__loadTimeControlDataResponse(struct soap *soap, _ns1__loadTimeControlDataResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__loadTimeControlDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__loadTimeControlData_DEFINED
#define SOAP_TYPE__ns1__loadTimeControlData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loadTimeControlData(struct soap*, const char*, int, const _ns1__loadTimeControlData *, const char*);
SOAP_FMAC3 _ns1__loadTimeControlData * SOAP_FMAC4 soap_in__ns1__loadTimeControlData(struct soap*, const char*, _ns1__loadTimeControlData *, const char*);
SOAP_FMAC1 _ns1__loadTimeControlData * SOAP_FMAC2 soap_instantiate__ns1__loadTimeControlData(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loadTimeControlData * soap_new__ns1__loadTimeControlData(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loadTimeControlData(soap, n, NULL, NULL, NULL);
}

inline _ns1__loadTimeControlData * soap_new_req__ns1__loadTimeControlData(
	struct soap *soap)
{
	_ns1__loadTimeControlData *_p = soap_new__ns1__loadTimeControlData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__loadTimeControlData * soap_new_set__ns1__loadTimeControlData(
	struct soap *soap)
{
	_ns1__loadTimeControlData *_p = soap_new__ns1__loadTimeControlData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns1__loadTimeControlData(struct soap *soap, _ns1__loadTimeControlData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loadTimeControlData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loadTimeControlData * SOAP_FMAC4 soap_get__ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData *, const char*, const char*);

inline int soap_read__ns1__loadTimeControlData(struct soap *soap, _ns1__loadTimeControlData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__loadTimeControlData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__bindAssemblyResponse_DEFINED
#define SOAP_TYPE__ns1__bindAssemblyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__bindAssemblyResponse(struct soap*, const char*, int, const _ns1__bindAssemblyResponse *, const char*);
SOAP_FMAC3 _ns1__bindAssemblyResponse * SOAP_FMAC4 soap_in__ns1__bindAssemblyResponse(struct soap*, const char*, _ns1__bindAssemblyResponse *, const char*);
SOAP_FMAC1 _ns1__bindAssemblyResponse * SOAP_FMAC2 soap_instantiate__ns1__bindAssemblyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__bindAssemblyResponse * soap_new__ns1__bindAssemblyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__bindAssemblyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__bindAssemblyResponse * soap_new_req__ns1__bindAssemblyResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__bindAssemblyResponse *_p = soap_new__ns1__bindAssemblyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__bindAssemblyResponse::out = out;
	}
	return _p;
}

inline _ns1__bindAssemblyResponse * soap_new_set__ns1__bindAssemblyResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__bindAssemblyResponse *_p = soap_new__ns1__bindAssemblyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__bindAssemblyResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__bindAssemblyResponse(struct soap *soap, _ns1__bindAssemblyResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:bindAssemblyResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__bindAssemblyResponse * SOAP_FMAC4 soap_get__ns1__bindAssemblyResponse(struct soap*, _ns1__bindAssemblyResponse *, const char*, const char*);

inline int soap_read__ns1__bindAssemblyResponse(struct soap *soap, _ns1__bindAssemblyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__bindAssemblyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__bindAssembly_DEFINED
#define SOAP_TYPE__ns1__bindAssembly_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__bindAssembly(struct soap*, const char*, int, const _ns1__bindAssembly *, const char*);
SOAP_FMAC3 _ns1__bindAssembly * SOAP_FMAC4 soap_in__ns1__bindAssembly(struct soap*, const char*, _ns1__bindAssembly *, const char*);
SOAP_FMAC1 _ns1__bindAssembly * SOAP_FMAC2 soap_instantiate__ns1__bindAssembly(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__bindAssembly * soap_new__ns1__bindAssembly(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__bindAssembly(soap, n, NULL, NULL, NULL);
}

inline _ns1__bindAssembly * soap_new_req__ns1__bindAssembly(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__bindAssembly *_p = soap_new__ns1__bindAssembly(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__bindAssembly::in0 = in0;
		_p->_ns1__bindAssembly::in1 = in1;
		_p->_ns1__bindAssembly::in2 = in2;
	}
	return _p;
}

inline _ns1__bindAssembly * soap_new_set__ns1__bindAssembly(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2)
{
	_ns1__bindAssembly *_p = soap_new__ns1__bindAssembly(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__bindAssembly::in0 = in0;
		_p->_ns1__bindAssembly::in1 = in1;
		_p->_ns1__bindAssembly::in2 = in2;
	}
	return _p;
}

inline int soap_write__ns1__bindAssembly(struct soap *soap, _ns1__bindAssembly const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:bindAssembly", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__bindAssembly * SOAP_FMAC4 soap_get__ns1__bindAssembly(struct soap*, _ns1__bindAssembly *, const char*, const char*);

inline int soap_read__ns1__bindAssembly(struct soap *soap, _ns1__bindAssembly *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__bindAssembly(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnSaveTechProcessResponse_DEFINED
#define SOAP_TYPE__ns1__SnSaveTechProcessResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnSaveTechProcessResponse(struct soap*, const char*, int, const _ns1__SnSaveTechProcessResponse *, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcessResponse * SOAP_FMAC4 soap_in__ns1__SnSaveTechProcessResponse(struct soap*, const char*, _ns1__SnSaveTechProcessResponse *, const char*);
SOAP_FMAC1 _ns1__SnSaveTechProcessResponse * SOAP_FMAC2 soap_instantiate__ns1__SnSaveTechProcessResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnSaveTechProcessResponse * soap_new__ns1__SnSaveTechProcessResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnSaveTechProcessResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnSaveTechProcessResponse * soap_new_req__ns1__SnSaveTechProcessResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__SnSaveTechProcessResponse *_p = soap_new__ns1__SnSaveTechProcessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcessResponse::out = out;
	}
	return _p;
}

inline _ns1__SnSaveTechProcessResponse * soap_new_set__ns1__SnSaveTechProcessResponse(
	struct soap *soap,
	std::string *out)
{
	_ns1__SnSaveTechProcessResponse *_p = soap_new__ns1__SnSaveTechProcessResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcessResponse::out = out;
	}
	return _p;
}

inline int soap_write__ns1__SnSaveTechProcessResponse(struct soap *soap, _ns1__SnSaveTechProcessResponse const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnSaveTechProcessResponse", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnSaveTechProcessResponse * SOAP_FMAC4 soap_get__ns1__SnSaveTechProcessResponse(struct soap*, _ns1__SnSaveTechProcessResponse *, const char*, const char*);

inline int soap_read__ns1__SnSaveTechProcessResponse(struct soap *soap, _ns1__SnSaveTechProcessResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnSaveTechProcessResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__SnSaveTechProcess_DEFINED
#define SOAP_TYPE__ns1__SnSaveTechProcess_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SnSaveTechProcess(struct soap*, const char*, int, const _ns1__SnSaveTechProcess *, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcess * SOAP_FMAC4 soap_in__ns1__SnSaveTechProcess(struct soap*, const char*, _ns1__SnSaveTechProcess *, const char*);
SOAP_FMAC1 _ns1__SnSaveTechProcess * SOAP_FMAC2 soap_instantiate__ns1__SnSaveTechProcess(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SnSaveTechProcess * soap_new__ns1__SnSaveTechProcess(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__SnSaveTechProcess(soap, n, NULL, NULL, NULL);
}

inline _ns1__SnSaveTechProcess * soap_new_req__ns1__SnSaveTechProcess(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7)
{
	_ns1__SnSaveTechProcess *_p = soap_new__ns1__SnSaveTechProcess(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess::in0 = in0;
		_p->_ns1__SnSaveTechProcess::in1 = in1;
		_p->_ns1__SnSaveTechProcess::in2 = in2;
		_p->_ns1__SnSaveTechProcess::in3 = in3;
		_p->_ns1__SnSaveTechProcess::in4 = in4;
		_p->_ns1__SnSaveTechProcess::in5 = in5;
		_p->_ns1__SnSaveTechProcess::in6 = in6;
		_p->_ns1__SnSaveTechProcess::in7 = in7;
	}
	return _p;
}

inline _ns1__SnSaveTechProcess * soap_new_set__ns1__SnSaveTechProcess(
	struct soap *soap,
	std::string *in0,
	std::string *in1,
	std::string *in2,
	std::string *in3,
	std::string *in4,
	std::string *in5,
	std::string *in6,
	std::string *in7)
{
	_ns1__SnSaveTechProcess *_p = soap_new__ns1__SnSaveTechProcess(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__SnSaveTechProcess::in0 = in0;
		_p->_ns1__SnSaveTechProcess::in1 = in1;
		_p->_ns1__SnSaveTechProcess::in2 = in2;
		_p->_ns1__SnSaveTechProcess::in3 = in3;
		_p->_ns1__SnSaveTechProcess::in4 = in4;
		_p->_ns1__SnSaveTechProcess::in5 = in5;
		_p->_ns1__SnSaveTechProcess::in6 = in6;
		_p->_ns1__SnSaveTechProcess::in7 = in7;
	}
	return _p;
}

inline int soap_write__ns1__SnSaveTechProcess(struct soap *soap, _ns1__SnSaveTechProcess const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:SnSaveTechProcess", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__SnSaveTechProcess * SOAP_FMAC4 soap_get__ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess *, const char*, const char*);

inline int soap_read__ns1__SnSaveTechProcess(struct soap *soap, _ns1__SnSaveTechProcess *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__SnSaveTechProcess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__CheckTimeGap_DEFINED
#define SOAP_TYPE___ns1__CheckTimeGap_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__CheckTimeGap(struct soap*, struct __ns1__CheckTimeGap *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__CheckTimeGap(struct soap*, const struct __ns1__CheckTimeGap *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__CheckTimeGap(struct soap*, const char*, int, const struct __ns1__CheckTimeGap *, const char*);
SOAP_FMAC3 struct __ns1__CheckTimeGap * SOAP_FMAC4 soap_in___ns1__CheckTimeGap(struct soap*, const char*, struct __ns1__CheckTimeGap *, const char*);
SOAP_FMAC1 struct __ns1__CheckTimeGap * SOAP_FMAC2 soap_instantiate___ns1__CheckTimeGap(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__CheckTimeGap * soap_new___ns1__CheckTimeGap(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__CheckTimeGap(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__CheckTimeGap * soap_new_req___ns1__CheckTimeGap(
	struct soap *soap)
{
	struct __ns1__CheckTimeGap *_p = soap_new___ns1__CheckTimeGap(soap);
	if (_p)
	{	soap_default___ns1__CheckTimeGap(soap, _p);
	}
	return _p;
}

inline struct __ns1__CheckTimeGap * soap_new_set___ns1__CheckTimeGap(
	struct soap *soap,
	_ns1__CheckTimeGap *ns1__CheckTimeGap)
{
	struct __ns1__CheckTimeGap *_p = soap_new___ns1__CheckTimeGap(soap);
	if (_p)
	{	soap_default___ns1__CheckTimeGap(soap, _p);
		_p->ns1__CheckTimeGap = ns1__CheckTimeGap;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__CheckTimeGap(struct soap*, const struct __ns1__CheckTimeGap *, const char*, const char*);

inline int soap_write___ns1__CheckTimeGap(struct soap *soap, struct __ns1__CheckTimeGap const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__CheckTimeGap(soap, p), 0) || soap_put___ns1__CheckTimeGap(soap, p, "-ns1:CheckTimeGap", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__CheckTimeGap * SOAP_FMAC4 soap_get___ns1__CheckTimeGap(struct soap*, struct __ns1__CheckTimeGap *, const char*, const char*);

inline int soap_read___ns1__CheckTimeGap(struct soap *soap, struct __ns1__CheckTimeGap *p)
{
	if (p)
	{	soap_default___ns1__CheckTimeGap(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__CheckTimeGap(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Ispasspostburnin_DEFINED
#define SOAP_TYPE___ns1__Ispasspostburnin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Ispasspostburnin(struct soap*, struct __ns1__Ispasspostburnin *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Ispasspostburnin(struct soap*, const struct __ns1__Ispasspostburnin *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Ispasspostburnin(struct soap*, const char*, int, const struct __ns1__Ispasspostburnin *, const char*);
SOAP_FMAC3 struct __ns1__Ispasspostburnin * SOAP_FMAC4 soap_in___ns1__Ispasspostburnin(struct soap*, const char*, struct __ns1__Ispasspostburnin *, const char*);
SOAP_FMAC1 struct __ns1__Ispasspostburnin * SOAP_FMAC2 soap_instantiate___ns1__Ispasspostburnin(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Ispasspostburnin * soap_new___ns1__Ispasspostburnin(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Ispasspostburnin(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Ispasspostburnin * soap_new_req___ns1__Ispasspostburnin(
	struct soap *soap)
{
	struct __ns1__Ispasspostburnin *_p = soap_new___ns1__Ispasspostburnin(soap);
	if (_p)
	{	soap_default___ns1__Ispasspostburnin(soap, _p);
	}
	return _p;
}

inline struct __ns1__Ispasspostburnin * soap_new_set___ns1__Ispasspostburnin(
	struct soap *soap,
	_ns1__Ispasspostburnin *ns1__Ispasspostburnin)
{
	struct __ns1__Ispasspostburnin *_p = soap_new___ns1__Ispasspostburnin(soap);
	if (_p)
	{	soap_default___ns1__Ispasspostburnin(soap, _p);
		_p->ns1__Ispasspostburnin = ns1__Ispasspostburnin;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Ispasspostburnin(struct soap*, const struct __ns1__Ispasspostburnin *, const char*, const char*);

inline int soap_write___ns1__Ispasspostburnin(struct soap *soap, struct __ns1__Ispasspostburnin const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__Ispasspostburnin(soap, p), 0) || soap_put___ns1__Ispasspostburnin(soap, p, "-ns1:Ispasspostburnin", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Ispasspostburnin * SOAP_FMAC4 soap_get___ns1__Ispasspostburnin(struct soap*, struct __ns1__Ispasspostburnin *, const char*, const char*);

inline int soap_read___ns1__Ispasspostburnin(struct soap *soap, struct __ns1__Ispasspostburnin *p)
{
	if (p)
	{	soap_default___ns1__Ispasspostburnin(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__Ispasspostburnin(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkingSNNextRoute_DEFINED
#define SOAP_TYPE___ns1__checkingSNNextRoute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkingSNNextRoute(struct soap*, struct __ns1__checkingSNNextRoute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkingSNNextRoute(struct soap*, const struct __ns1__checkingSNNextRoute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkingSNNextRoute(struct soap*, const char*, int, const struct __ns1__checkingSNNextRoute *, const char*);
SOAP_FMAC3 struct __ns1__checkingSNNextRoute * SOAP_FMAC4 soap_in___ns1__checkingSNNextRoute(struct soap*, const char*, struct __ns1__checkingSNNextRoute *, const char*);
SOAP_FMAC1 struct __ns1__checkingSNNextRoute * SOAP_FMAC2 soap_instantiate___ns1__checkingSNNextRoute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkingSNNextRoute * soap_new___ns1__checkingSNNextRoute(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkingSNNextRoute(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkingSNNextRoute * soap_new_req___ns1__checkingSNNextRoute(
	struct soap *soap)
{
	struct __ns1__checkingSNNextRoute *_p = soap_new___ns1__checkingSNNextRoute(soap);
	if (_p)
	{	soap_default___ns1__checkingSNNextRoute(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkingSNNextRoute * soap_new_set___ns1__checkingSNNextRoute(
	struct soap *soap,
	_ns1__checkingSNNextRoute *ns1__checkingSNNextRoute)
{
	struct __ns1__checkingSNNextRoute *_p = soap_new___ns1__checkingSNNextRoute(soap);
	if (_p)
	{	soap_default___ns1__checkingSNNextRoute(soap, _p);
		_p->ns1__checkingSNNextRoute = ns1__checkingSNNextRoute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkingSNNextRoute(struct soap*, const struct __ns1__checkingSNNextRoute *, const char*, const char*);

inline int soap_write___ns1__checkingSNNextRoute(struct soap *soap, struct __ns1__checkingSNNextRoute const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__checkingSNNextRoute(soap, p), 0) || soap_put___ns1__checkingSNNextRoute(soap, p, "-ns1:checkingSNNextRoute", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkingSNNextRoute * SOAP_FMAC4 soap_get___ns1__checkingSNNextRoute(struct soap*, struct __ns1__checkingSNNextRoute *, const char*, const char*);

inline int soap_read___ns1__checkingSNNextRoute(struct soap *soap, struct __ns1__checkingSNNextRoute *p)
{
	if (p)
	{	soap_default___ns1__checkingSNNextRoute(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkingSNNextRoute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__blakeTestExchangeData_DEFINED
#define SOAP_TYPE___ns1__blakeTestExchangeData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__blakeTestExchangeData(struct soap*, struct __ns1__blakeTestExchangeData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__blakeTestExchangeData(struct soap*, const struct __ns1__blakeTestExchangeData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__blakeTestExchangeData(struct soap*, const char*, int, const struct __ns1__blakeTestExchangeData *, const char*);
SOAP_FMAC3 struct __ns1__blakeTestExchangeData * SOAP_FMAC4 soap_in___ns1__blakeTestExchangeData(struct soap*, const char*, struct __ns1__blakeTestExchangeData *, const char*);
SOAP_FMAC1 struct __ns1__blakeTestExchangeData * SOAP_FMAC2 soap_instantiate___ns1__blakeTestExchangeData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__blakeTestExchangeData * soap_new___ns1__blakeTestExchangeData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__blakeTestExchangeData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__blakeTestExchangeData * soap_new_req___ns1__blakeTestExchangeData(
	struct soap *soap)
{
	struct __ns1__blakeTestExchangeData *_p = soap_new___ns1__blakeTestExchangeData(soap);
	if (_p)
	{	soap_default___ns1__blakeTestExchangeData(soap, _p);
	}
	return _p;
}

inline struct __ns1__blakeTestExchangeData * soap_new_set___ns1__blakeTestExchangeData(
	struct soap *soap,
	_ns1__blakeTestExchangeData *ns1__blakeTestExchangeData)
{
	struct __ns1__blakeTestExchangeData *_p = soap_new___ns1__blakeTestExchangeData(soap);
	if (_p)
	{	soap_default___ns1__blakeTestExchangeData(soap, _p);
		_p->ns1__blakeTestExchangeData = ns1__blakeTestExchangeData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__blakeTestExchangeData(struct soap*, const struct __ns1__blakeTestExchangeData *, const char*, const char*);

inline int soap_write___ns1__blakeTestExchangeData(struct soap *soap, struct __ns1__blakeTestExchangeData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__blakeTestExchangeData(soap, p), 0) || soap_put___ns1__blakeTestExchangeData(soap, p, "-ns1:blakeTestExchangeData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__blakeTestExchangeData * SOAP_FMAC4 soap_get___ns1__blakeTestExchangeData(struct soap*, struct __ns1__blakeTestExchangeData *, const char*, const char*);

inline int soap_read___ns1__blakeTestExchangeData(struct soap *soap, struct __ns1__blakeTestExchangeData *p)
{
	if (p)
	{	soap_default___ns1__blakeTestExchangeData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__blakeTestExchangeData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__goNewRouteseq_DEFINED
#define SOAP_TYPE___ns1__goNewRouteseq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__goNewRouteseq(struct soap*, struct __ns1__goNewRouteseq *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__goNewRouteseq(struct soap*, const struct __ns1__goNewRouteseq *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__goNewRouteseq(struct soap*, const char*, int, const struct __ns1__goNewRouteseq *, const char*);
SOAP_FMAC3 struct __ns1__goNewRouteseq * SOAP_FMAC4 soap_in___ns1__goNewRouteseq(struct soap*, const char*, struct __ns1__goNewRouteseq *, const char*);
SOAP_FMAC1 struct __ns1__goNewRouteseq * SOAP_FMAC2 soap_instantiate___ns1__goNewRouteseq(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__goNewRouteseq * soap_new___ns1__goNewRouteseq(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__goNewRouteseq(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__goNewRouteseq * soap_new_req___ns1__goNewRouteseq(
	struct soap *soap)
{
	struct __ns1__goNewRouteseq *_p = soap_new___ns1__goNewRouteseq(soap);
	if (_p)
	{	soap_default___ns1__goNewRouteseq(soap, _p);
	}
	return _p;
}

inline struct __ns1__goNewRouteseq * soap_new_set___ns1__goNewRouteseq(
	struct soap *soap,
	_ns1__goNewRouteseq *ns1__goNewRouteseq)
{
	struct __ns1__goNewRouteseq *_p = soap_new___ns1__goNewRouteseq(soap);
	if (_p)
	{	soap_default___ns1__goNewRouteseq(soap, _p);
		_p->ns1__goNewRouteseq = ns1__goNewRouteseq;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__goNewRouteseq(struct soap*, const struct __ns1__goNewRouteseq *, const char*, const char*);

inline int soap_write___ns1__goNewRouteseq(struct soap *soap, struct __ns1__goNewRouteseq const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__goNewRouteseq(soap, p), 0) || soap_put___ns1__goNewRouteseq(soap, p, "-ns1:goNewRouteseq", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__goNewRouteseq * SOAP_FMAC4 soap_get___ns1__goNewRouteseq(struct soap*, struct __ns1__goNewRouteseq *, const char*, const char*);

inline int soap_read___ns1__goNewRouteseq(struct soap *soap, struct __ns1__goNewRouteseq *p)
{
	if (p)
	{	soap_default___ns1__goNewRouteseq(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__goNewRouteseq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__fetchSnCurrentLocation_DEFINED
#define SOAP_TYPE___ns1__fetchSnCurrentLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__fetchSnCurrentLocation(struct soap*, struct __ns1__fetchSnCurrentLocation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__fetchSnCurrentLocation(struct soap*, const struct __ns1__fetchSnCurrentLocation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__fetchSnCurrentLocation(struct soap*, const char*, int, const struct __ns1__fetchSnCurrentLocation *, const char*);
SOAP_FMAC3 struct __ns1__fetchSnCurrentLocation * SOAP_FMAC4 soap_in___ns1__fetchSnCurrentLocation(struct soap*, const char*, struct __ns1__fetchSnCurrentLocation *, const char*);
SOAP_FMAC1 struct __ns1__fetchSnCurrentLocation * SOAP_FMAC2 soap_instantiate___ns1__fetchSnCurrentLocation(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__fetchSnCurrentLocation * soap_new___ns1__fetchSnCurrentLocation(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__fetchSnCurrentLocation(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__fetchSnCurrentLocation * soap_new_req___ns1__fetchSnCurrentLocation(
	struct soap *soap)
{
	struct __ns1__fetchSnCurrentLocation *_p = soap_new___ns1__fetchSnCurrentLocation(soap);
	if (_p)
	{	soap_default___ns1__fetchSnCurrentLocation(soap, _p);
	}
	return _p;
}

inline struct __ns1__fetchSnCurrentLocation * soap_new_set___ns1__fetchSnCurrentLocation(
	struct soap *soap,
	_ns1__fetchSnCurrentLocation *ns1__fetchSnCurrentLocation)
{
	struct __ns1__fetchSnCurrentLocation *_p = soap_new___ns1__fetchSnCurrentLocation(soap);
	if (_p)
	{	soap_default___ns1__fetchSnCurrentLocation(soap, _p);
		_p->ns1__fetchSnCurrentLocation = ns1__fetchSnCurrentLocation;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__fetchSnCurrentLocation(struct soap*, const struct __ns1__fetchSnCurrentLocation *, const char*, const char*);

inline int soap_write___ns1__fetchSnCurrentLocation(struct soap *soap, struct __ns1__fetchSnCurrentLocation const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__fetchSnCurrentLocation(soap, p), 0) || soap_put___ns1__fetchSnCurrentLocation(soap, p, "-ns1:fetchSnCurrentLocation", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__fetchSnCurrentLocation * SOAP_FMAC4 soap_get___ns1__fetchSnCurrentLocation(struct soap*, struct __ns1__fetchSnCurrentLocation *, const char*, const char*);

inline int soap_read___ns1__fetchSnCurrentLocation(struct soap *soap, struct __ns1__fetchSnCurrentLocation *p)
{
	if (p)
	{	soap_default___ns1__fetchSnCurrentLocation(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__fetchSnCurrentLocation(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getMaintanceParm_DEFINED
#define SOAP_TYPE___ns1__getMaintanceParm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getMaintanceParm(struct soap*, struct __ns1__getMaintanceParm *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getMaintanceParm(struct soap*, const struct __ns1__getMaintanceParm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getMaintanceParm(struct soap*, const char*, int, const struct __ns1__getMaintanceParm *, const char*);
SOAP_FMAC3 struct __ns1__getMaintanceParm * SOAP_FMAC4 soap_in___ns1__getMaintanceParm(struct soap*, const char*, struct __ns1__getMaintanceParm *, const char*);
SOAP_FMAC1 struct __ns1__getMaintanceParm * SOAP_FMAC2 soap_instantiate___ns1__getMaintanceParm(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getMaintanceParm * soap_new___ns1__getMaintanceParm(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getMaintanceParm(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getMaintanceParm * soap_new_req___ns1__getMaintanceParm(
	struct soap *soap)
{
	struct __ns1__getMaintanceParm *_p = soap_new___ns1__getMaintanceParm(soap);
	if (_p)
	{	soap_default___ns1__getMaintanceParm(soap, _p);
	}
	return _p;
}

inline struct __ns1__getMaintanceParm * soap_new_set___ns1__getMaintanceParm(
	struct soap *soap,
	_ns1__getMaintanceParm *ns1__getMaintanceParm)
{
	struct __ns1__getMaintanceParm *_p = soap_new___ns1__getMaintanceParm(soap);
	if (_p)
	{	soap_default___ns1__getMaintanceParm(soap, _p);
		_p->ns1__getMaintanceParm = ns1__getMaintanceParm;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getMaintanceParm(struct soap*, const struct __ns1__getMaintanceParm *, const char*, const char*);

inline int soap_write___ns1__getMaintanceParm(struct soap *soap, struct __ns1__getMaintanceParm const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getMaintanceParm(soap, p), 0) || soap_put___ns1__getMaintanceParm(soap, p, "-ns1:getMaintanceParm", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getMaintanceParm * SOAP_FMAC4 soap_get___ns1__getMaintanceParm(struct soap*, struct __ns1__getMaintanceParm *, const char*, const char*);

inline int soap_read___ns1__getMaintanceParm(struct soap *soap, struct __ns1__getMaintanceParm *p)
{
	if (p)
	{	soap_default___ns1__getMaintanceParm(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getMaintanceParm(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkMac_DEFINED
#define SOAP_TYPE___ns1__checkMac_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkMac(struct soap*, struct __ns1__checkMac *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkMac(struct soap*, const struct __ns1__checkMac *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkMac(struct soap*, const char*, int, const struct __ns1__checkMac *, const char*);
SOAP_FMAC3 struct __ns1__checkMac * SOAP_FMAC4 soap_in___ns1__checkMac(struct soap*, const char*, struct __ns1__checkMac *, const char*);
SOAP_FMAC1 struct __ns1__checkMac * SOAP_FMAC2 soap_instantiate___ns1__checkMac(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkMac * soap_new___ns1__checkMac(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkMac(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkMac * soap_new_req___ns1__checkMac(
	struct soap *soap)
{
	struct __ns1__checkMac *_p = soap_new___ns1__checkMac(soap);
	if (_p)
	{	soap_default___ns1__checkMac(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkMac * soap_new_set___ns1__checkMac(
	struct soap *soap,
	_ns1__checkMac *ns1__checkMac)
{
	struct __ns1__checkMac *_p = soap_new___ns1__checkMac(soap);
	if (_p)
	{	soap_default___ns1__checkMac(soap, _p);
		_p->ns1__checkMac = ns1__checkMac;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkMac(struct soap*, const struct __ns1__checkMac *, const char*, const char*);

inline int soap_write___ns1__checkMac(struct soap *soap, struct __ns1__checkMac const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__checkMac(soap, p), 0) || soap_put___ns1__checkMac(soap, p, "-ns1:checkMac", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkMac * SOAP_FMAC4 soap_get___ns1__checkMac(struct soap*, struct __ns1__checkMac *, const char*, const char*);

inline int soap_read___ns1__checkMac(struct soap *soap, struct __ns1__checkMac *p)
{
	if (p)
	{	soap_default___ns1__checkMac(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkMac(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsertTimeControl_DEFINED
#define SOAP_TYPE___ns1__InsertTimeControl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsertTimeControl(struct soap*, struct __ns1__InsertTimeControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsertTimeControl(struct soap*, const struct __ns1__InsertTimeControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsertTimeControl(struct soap*, const char*, int, const struct __ns1__InsertTimeControl *, const char*);
SOAP_FMAC3 struct __ns1__InsertTimeControl * SOAP_FMAC4 soap_in___ns1__InsertTimeControl(struct soap*, const char*, struct __ns1__InsertTimeControl *, const char*);
SOAP_FMAC1 struct __ns1__InsertTimeControl * SOAP_FMAC2 soap_instantiate___ns1__InsertTimeControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsertTimeControl * soap_new___ns1__InsertTimeControl(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsertTimeControl(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsertTimeControl * soap_new_req___ns1__InsertTimeControl(
	struct soap *soap)
{
	struct __ns1__InsertTimeControl *_p = soap_new___ns1__InsertTimeControl(soap);
	if (_p)
	{	soap_default___ns1__InsertTimeControl(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsertTimeControl * soap_new_set___ns1__InsertTimeControl(
	struct soap *soap,
	_ns1__InsertTimeControl *ns1__InsertTimeControl)
{
	struct __ns1__InsertTimeControl *_p = soap_new___ns1__InsertTimeControl(soap);
	if (_p)
	{	soap_default___ns1__InsertTimeControl(soap, _p);
		_p->ns1__InsertTimeControl = ns1__InsertTimeControl;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsertTimeControl(struct soap*, const struct __ns1__InsertTimeControl *, const char*, const char*);

inline int soap_write___ns1__InsertTimeControl(struct soap *soap, struct __ns1__InsertTimeControl const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__InsertTimeControl(soap, p), 0) || soap_put___ns1__InsertTimeControl(soap, p, "-ns1:InsertTimeControl", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsertTimeControl * SOAP_FMAC4 soap_get___ns1__InsertTimeControl(struct soap*, struct __ns1__InsertTimeControl *, const char*, const char*);

inline int soap_read___ns1__InsertTimeControl(struct soap *soap, struct __ns1__InsertTimeControl *p)
{
	if (p)
	{	soap_default___ns1__InsertTimeControl(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsertTimeControl(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__blakeTestExchangeData1_DEFINED
#define SOAP_TYPE___ns1__blakeTestExchangeData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__blakeTestExchangeData1(struct soap*, struct __ns1__blakeTestExchangeData1 *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__blakeTestExchangeData1(struct soap*, const struct __ns1__blakeTestExchangeData1 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__blakeTestExchangeData1(struct soap*, const char*, int, const struct __ns1__blakeTestExchangeData1 *, const char*);
SOAP_FMAC3 struct __ns1__blakeTestExchangeData1 * SOAP_FMAC4 soap_in___ns1__blakeTestExchangeData1(struct soap*, const char*, struct __ns1__blakeTestExchangeData1 *, const char*);
SOAP_FMAC1 struct __ns1__blakeTestExchangeData1 * SOAP_FMAC2 soap_instantiate___ns1__blakeTestExchangeData1(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__blakeTestExchangeData1 * soap_new___ns1__blakeTestExchangeData1(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__blakeTestExchangeData1(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__blakeTestExchangeData1 * soap_new_req___ns1__blakeTestExchangeData1(
	struct soap *soap)
{
	struct __ns1__blakeTestExchangeData1 *_p = soap_new___ns1__blakeTestExchangeData1(soap);
	if (_p)
	{	soap_default___ns1__blakeTestExchangeData1(soap, _p);
	}
	return _p;
}

inline struct __ns1__blakeTestExchangeData1 * soap_new_set___ns1__blakeTestExchangeData1(
	struct soap *soap,
	_ns1__blakeTestExchangeData1 *ns1__blakeTestExchangeData1)
{
	struct __ns1__blakeTestExchangeData1 *_p = soap_new___ns1__blakeTestExchangeData1(soap);
	if (_p)
	{	soap_default___ns1__blakeTestExchangeData1(soap, _p);
		_p->ns1__blakeTestExchangeData1 = ns1__blakeTestExchangeData1;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__blakeTestExchangeData1(struct soap*, const struct __ns1__blakeTestExchangeData1 *, const char*, const char*);

inline int soap_write___ns1__blakeTestExchangeData1(struct soap *soap, struct __ns1__blakeTestExchangeData1 const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__blakeTestExchangeData1(soap, p), 0) || soap_put___ns1__blakeTestExchangeData1(soap, p, "-ns1:blakeTestExchangeData1", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__blakeTestExchangeData1 * SOAP_FMAC4 soap_get___ns1__blakeTestExchangeData1(struct soap*, struct __ns1__blakeTestExchangeData1 *, const char*, const char*);

inline int soap_read___ns1__blakeTestExchangeData1(struct soap *soap, struct __ns1__blakeTestExchangeData1 *p)
{
	if (p)
	{	soap_default___ns1__blakeTestExchangeData1(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__blakeTestExchangeData1(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__InsertPRateData_DEFINED
#define SOAP_TYPE___ns1__InsertPRateData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__InsertPRateData(struct soap*, struct __ns1__InsertPRateData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__InsertPRateData(struct soap*, const struct __ns1__InsertPRateData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__InsertPRateData(struct soap*, const char*, int, const struct __ns1__InsertPRateData *, const char*);
SOAP_FMAC3 struct __ns1__InsertPRateData * SOAP_FMAC4 soap_in___ns1__InsertPRateData(struct soap*, const char*, struct __ns1__InsertPRateData *, const char*);
SOAP_FMAC1 struct __ns1__InsertPRateData * SOAP_FMAC2 soap_instantiate___ns1__InsertPRateData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__InsertPRateData * soap_new___ns1__InsertPRateData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__InsertPRateData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__InsertPRateData * soap_new_req___ns1__InsertPRateData(
	struct soap *soap)
{
	struct __ns1__InsertPRateData *_p = soap_new___ns1__InsertPRateData(soap);
	if (_p)
	{	soap_default___ns1__InsertPRateData(soap, _p);
	}
	return _p;
}

inline struct __ns1__InsertPRateData * soap_new_set___ns1__InsertPRateData(
	struct soap *soap,
	_ns1__InsertPRateData *ns1__InsertPRateData)
{
	struct __ns1__InsertPRateData *_p = soap_new___ns1__InsertPRateData(soap);
	if (_p)
	{	soap_default___ns1__InsertPRateData(soap, _p);
		_p->ns1__InsertPRateData = ns1__InsertPRateData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__InsertPRateData(struct soap*, const struct __ns1__InsertPRateData *, const char*, const char*);

inline int soap_write___ns1__InsertPRateData(struct soap *soap, struct __ns1__InsertPRateData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__InsertPRateData(soap, p), 0) || soap_put___ns1__InsertPRateData(soap, p, "-ns1:InsertPRateData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__InsertPRateData * SOAP_FMAC4 soap_get___ns1__InsertPRateData(struct soap*, struct __ns1__InsertPRateData *, const char*, const char*);

inline int soap_read___ns1__InsertPRateData(struct soap *soap, struct __ns1__InsertPRateData *p)
{
	if (p)
	{	soap_default___ns1__InsertPRateData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__InsertPRateData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__getAssemblyData_DEFINED
#define SOAP_TYPE___ns1__getAssemblyData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__getAssemblyData(struct soap*, struct __ns1__getAssemblyData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__getAssemblyData(struct soap*, const struct __ns1__getAssemblyData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__getAssemblyData(struct soap*, const char*, int, const struct __ns1__getAssemblyData *, const char*);
SOAP_FMAC3 struct __ns1__getAssemblyData * SOAP_FMAC4 soap_in___ns1__getAssemblyData(struct soap*, const char*, struct __ns1__getAssemblyData *, const char*);
SOAP_FMAC1 struct __ns1__getAssemblyData * SOAP_FMAC2 soap_instantiate___ns1__getAssemblyData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__getAssemblyData * soap_new___ns1__getAssemblyData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__getAssemblyData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__getAssemblyData * soap_new_req___ns1__getAssemblyData(
	struct soap *soap)
{
	struct __ns1__getAssemblyData *_p = soap_new___ns1__getAssemblyData(soap);
	if (_p)
	{	soap_default___ns1__getAssemblyData(soap, _p);
	}
	return _p;
}

inline struct __ns1__getAssemblyData * soap_new_set___ns1__getAssemblyData(
	struct soap *soap,
	_ns1__getAssemblyData *ns1__getAssemblyData)
{
	struct __ns1__getAssemblyData *_p = soap_new___ns1__getAssemblyData(soap);
	if (_p)
	{	soap_default___ns1__getAssemblyData(soap, _p);
		_p->ns1__getAssemblyData = ns1__getAssemblyData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__getAssemblyData(struct soap*, const struct __ns1__getAssemblyData *, const char*, const char*);

inline int soap_write___ns1__getAssemblyData(struct soap *soap, struct __ns1__getAssemblyData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__getAssemblyData(soap, p), 0) || soap_put___ns1__getAssemblyData(soap, p, "-ns1:getAssemblyData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__getAssemblyData * SOAP_FMAC4 soap_get___ns1__getAssemblyData(struct soap*, struct __ns1__getAssemblyData *, const char*, const char*);

inline int soap_read___ns1__getAssemblyData(struct soap *soap, struct __ns1__getAssemblyData *p)
{
	if (p)
	{	soap_default___ns1__getAssemblyData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__getAssemblyData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__staffCheck_DEFINED
#define SOAP_TYPE___ns1__staffCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__staffCheck(struct soap*, struct __ns1__staffCheck *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__staffCheck(struct soap*, const struct __ns1__staffCheck *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__staffCheck(struct soap*, const char*, int, const struct __ns1__staffCheck *, const char*);
SOAP_FMAC3 struct __ns1__staffCheck * SOAP_FMAC4 soap_in___ns1__staffCheck(struct soap*, const char*, struct __ns1__staffCheck *, const char*);
SOAP_FMAC1 struct __ns1__staffCheck * SOAP_FMAC2 soap_instantiate___ns1__staffCheck(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__staffCheck * soap_new___ns1__staffCheck(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__staffCheck(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__staffCheck * soap_new_req___ns1__staffCheck(
	struct soap *soap)
{
	struct __ns1__staffCheck *_p = soap_new___ns1__staffCheck(soap);
	if (_p)
	{	soap_default___ns1__staffCheck(soap, _p);
	}
	return _p;
}

inline struct __ns1__staffCheck * soap_new_set___ns1__staffCheck(
	struct soap *soap,
	_ns1__staffCheck *ns1__staffCheck)
{
	struct __ns1__staffCheck *_p = soap_new___ns1__staffCheck(soap);
	if (_p)
	{	soap_default___ns1__staffCheck(soap, _p);
		_p->ns1__staffCheck = ns1__staffCheck;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__staffCheck(struct soap*, const struct __ns1__staffCheck *, const char*, const char*);

inline int soap_write___ns1__staffCheck(struct soap *soap, struct __ns1__staffCheck const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__staffCheck(soap, p), 0) || soap_put___ns1__staffCheck(soap, p, "-ns1:staffCheck", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__staffCheck * SOAP_FMAC4 soap_get___ns1__staffCheck(struct soap*, struct __ns1__staffCheck *, const char*, const char*);

inline int soap_read___ns1__staffCheck(struct soap *soap, struct __ns1__staffCheck *p)
{
	if (p)
	{	soap_default___ns1__staffCheck(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__staffCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnSaveTechProcess_USCOREA_DEFINED
#define SOAP_TYPE___ns1__SnSaveTechProcess_USCOREA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnSaveTechProcess_USCOREA(struct soap*, struct __ns1__SnSaveTechProcess_USCOREA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnSaveTechProcess_USCOREA(struct soap*, const struct __ns1__SnSaveTechProcess_USCOREA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnSaveTechProcess_USCOREA(struct soap*, const char*, int, const struct __ns1__SnSaveTechProcess_USCOREA *, const char*);
SOAP_FMAC3 struct __ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC4 soap_in___ns1__SnSaveTechProcess_USCOREA(struct soap*, const char*, struct __ns1__SnSaveTechProcess_USCOREA *, const char*);
SOAP_FMAC1 struct __ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC2 soap_instantiate___ns1__SnSaveTechProcess_USCOREA(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnSaveTechProcess_USCOREA * soap_new___ns1__SnSaveTechProcess_USCOREA(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnSaveTechProcess_USCOREA(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnSaveTechProcess_USCOREA * soap_new_req___ns1__SnSaveTechProcess_USCOREA(
	struct soap *soap)
{
	struct __ns1__SnSaveTechProcess_USCOREA *_p = soap_new___ns1__SnSaveTechProcess_USCOREA(soap);
	if (_p)
	{	soap_default___ns1__SnSaveTechProcess_USCOREA(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnSaveTechProcess_USCOREA * soap_new_set___ns1__SnSaveTechProcess_USCOREA(
	struct soap *soap,
	_ns1__SnSaveTechProcess_USCOREA *ns1__SnSaveTechProcess_USCOREA)
{
	struct __ns1__SnSaveTechProcess_USCOREA *_p = soap_new___ns1__SnSaveTechProcess_USCOREA(soap);
	if (_p)
	{	soap_default___ns1__SnSaveTechProcess_USCOREA(soap, _p);
		_p->ns1__SnSaveTechProcess_USCOREA = ns1__SnSaveTechProcess_USCOREA;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnSaveTechProcess_USCOREA(struct soap*, const struct __ns1__SnSaveTechProcess_USCOREA *, const char*, const char*);

inline int soap_write___ns1__SnSaveTechProcess_USCOREA(struct soap *soap, struct __ns1__SnSaveTechProcess_USCOREA const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SnSaveTechProcess_USCOREA(soap, p), 0) || soap_put___ns1__SnSaveTechProcess_USCOREA(soap, p, "-ns1:SnSaveTechProcess_A", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnSaveTechProcess_USCOREA * SOAP_FMAC4 soap_get___ns1__SnSaveTechProcess_USCOREA(struct soap*, struct __ns1__SnSaveTechProcess_USCOREA *, const char*, const char*);

inline int soap_read___ns1__SnSaveTechProcess_USCOREA(struct soap *soap, struct __ns1__SnSaveTechProcess_USCOREA *p)
{
	if (p)
	{	soap_default___ns1__SnSaveTechProcess_USCOREA(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnSaveTechProcess_USCOREA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSNPangusOrderNo_DEFINED
#define SOAP_TYPE___ns1__checkSNPangusOrderNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSNPangusOrderNo(struct soap*, struct __ns1__checkSNPangusOrderNo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSNPangusOrderNo(struct soap*, const struct __ns1__checkSNPangusOrderNo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSNPangusOrderNo(struct soap*, const char*, int, const struct __ns1__checkSNPangusOrderNo *, const char*);
SOAP_FMAC3 struct __ns1__checkSNPangusOrderNo * SOAP_FMAC4 soap_in___ns1__checkSNPangusOrderNo(struct soap*, const char*, struct __ns1__checkSNPangusOrderNo *, const char*);
SOAP_FMAC1 struct __ns1__checkSNPangusOrderNo * SOAP_FMAC2 soap_instantiate___ns1__checkSNPangusOrderNo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSNPangusOrderNo * soap_new___ns1__checkSNPangusOrderNo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSNPangusOrderNo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSNPangusOrderNo * soap_new_req___ns1__checkSNPangusOrderNo(
	struct soap *soap)
{
	struct __ns1__checkSNPangusOrderNo *_p = soap_new___ns1__checkSNPangusOrderNo(soap);
	if (_p)
	{	soap_default___ns1__checkSNPangusOrderNo(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSNPangusOrderNo * soap_new_set___ns1__checkSNPangusOrderNo(
	struct soap *soap,
	_ns1__checkSNPangusOrderNo *ns1__checkSNPangusOrderNo)
{
	struct __ns1__checkSNPangusOrderNo *_p = soap_new___ns1__checkSNPangusOrderNo(soap);
	if (_p)
	{	soap_default___ns1__checkSNPangusOrderNo(soap, _p);
		_p->ns1__checkSNPangusOrderNo = ns1__checkSNPangusOrderNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSNPangusOrderNo(struct soap*, const struct __ns1__checkSNPangusOrderNo *, const char*, const char*);

inline int soap_write___ns1__checkSNPangusOrderNo(struct soap *soap, struct __ns1__checkSNPangusOrderNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSNPangusOrderNo(soap, p), 0) || soap_put___ns1__checkSNPangusOrderNo(soap, p, "-ns1:checkSNPangusOrderNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSNPangusOrderNo * SOAP_FMAC4 soap_get___ns1__checkSNPangusOrderNo(struct soap*, struct __ns1__checkSNPangusOrderNo *, const char*, const char*);

inline int soap_read___ns1__checkSNPangusOrderNo(struct soap *soap, struct __ns1__checkSNPangusOrderNo *p)
{
	if (p)
	{	soap_default___ns1__checkSNPangusOrderNo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSNPangusOrderNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__checkSNOrderNo_DEFINED
#define SOAP_TYPE___ns1__checkSNOrderNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__checkSNOrderNo(struct soap*, struct __ns1__checkSNOrderNo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__checkSNOrderNo(struct soap*, const struct __ns1__checkSNOrderNo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__checkSNOrderNo(struct soap*, const char*, int, const struct __ns1__checkSNOrderNo *, const char*);
SOAP_FMAC3 struct __ns1__checkSNOrderNo * SOAP_FMAC4 soap_in___ns1__checkSNOrderNo(struct soap*, const char*, struct __ns1__checkSNOrderNo *, const char*);
SOAP_FMAC1 struct __ns1__checkSNOrderNo * SOAP_FMAC2 soap_instantiate___ns1__checkSNOrderNo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__checkSNOrderNo * soap_new___ns1__checkSNOrderNo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__checkSNOrderNo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__checkSNOrderNo * soap_new_req___ns1__checkSNOrderNo(
	struct soap *soap)
{
	struct __ns1__checkSNOrderNo *_p = soap_new___ns1__checkSNOrderNo(soap);
	if (_p)
	{	soap_default___ns1__checkSNOrderNo(soap, _p);
	}
	return _p;
}

inline struct __ns1__checkSNOrderNo * soap_new_set___ns1__checkSNOrderNo(
	struct soap *soap,
	_ns1__checkSNOrderNo *ns1__checkSNOrderNo)
{
	struct __ns1__checkSNOrderNo *_p = soap_new___ns1__checkSNOrderNo(soap);
	if (_p)
	{	soap_default___ns1__checkSNOrderNo(soap, _p);
		_p->ns1__checkSNOrderNo = ns1__checkSNOrderNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__checkSNOrderNo(struct soap*, const struct __ns1__checkSNOrderNo *, const char*, const char*);

inline int soap_write___ns1__checkSNOrderNo(struct soap *soap, struct __ns1__checkSNOrderNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__checkSNOrderNo(soap, p), 0) || soap_put___ns1__checkSNOrderNo(soap, p, "-ns1:checkSNOrderNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__checkSNOrderNo * SOAP_FMAC4 soap_get___ns1__checkSNOrderNo(struct soap*, struct __ns1__checkSNOrderNo *, const char*, const char*);

inline int soap_read___ns1__checkSNOrderNo(struct soap *soap, struct __ns1__checkSNOrderNo *p)
{
	if (p)
	{	soap_default___ns1__checkSNOrderNo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__checkSNOrderNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__loadNgPanelNo_DEFINED
#define SOAP_TYPE___ns1__loadNgPanelNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loadNgPanelNo(struct soap*, struct __ns1__loadNgPanelNo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loadNgPanelNo(struct soap*, const struct __ns1__loadNgPanelNo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loadNgPanelNo(struct soap*, const char*, int, const struct __ns1__loadNgPanelNo *, const char*);
SOAP_FMAC3 struct __ns1__loadNgPanelNo * SOAP_FMAC4 soap_in___ns1__loadNgPanelNo(struct soap*, const char*, struct __ns1__loadNgPanelNo *, const char*);
SOAP_FMAC1 struct __ns1__loadNgPanelNo * SOAP_FMAC2 soap_instantiate___ns1__loadNgPanelNo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__loadNgPanelNo * soap_new___ns1__loadNgPanelNo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__loadNgPanelNo(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__loadNgPanelNo * soap_new_req___ns1__loadNgPanelNo(
	struct soap *soap)
{
	struct __ns1__loadNgPanelNo *_p = soap_new___ns1__loadNgPanelNo(soap);
	if (_p)
	{	soap_default___ns1__loadNgPanelNo(soap, _p);
	}
	return _p;
}

inline struct __ns1__loadNgPanelNo * soap_new_set___ns1__loadNgPanelNo(
	struct soap *soap,
	_ns1__loadNgPanelNo *ns1__loadNgPanelNo)
{
	struct __ns1__loadNgPanelNo *_p = soap_new___ns1__loadNgPanelNo(soap);
	if (_p)
	{	soap_default___ns1__loadNgPanelNo(soap, _p);
		_p->ns1__loadNgPanelNo = ns1__loadNgPanelNo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loadNgPanelNo(struct soap*, const struct __ns1__loadNgPanelNo *, const char*, const char*);

inline int soap_write___ns1__loadNgPanelNo(struct soap *soap, struct __ns1__loadNgPanelNo const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__loadNgPanelNo(soap, p), 0) || soap_put___ns1__loadNgPanelNo(soap, p, "-ns1:loadNgPanelNo", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__loadNgPanelNo * SOAP_FMAC4 soap_get___ns1__loadNgPanelNo(struct soap*, struct __ns1__loadNgPanelNo *, const char*, const char*);

inline int soap_read___ns1__loadNgPanelNo(struct soap *soap, struct __ns1__loadNgPanelNo *p)
{
	if (p)
	{	soap_default___ns1__loadNgPanelNo(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__loadNgPanelNo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__loadTimeControlData_DEFINED
#define SOAP_TYPE___ns1__loadTimeControlData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__loadTimeControlData(struct soap*, struct __ns1__loadTimeControlData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__loadTimeControlData(struct soap*, const struct __ns1__loadTimeControlData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__loadTimeControlData(struct soap*, const char*, int, const struct __ns1__loadTimeControlData *, const char*);
SOAP_FMAC3 struct __ns1__loadTimeControlData * SOAP_FMAC4 soap_in___ns1__loadTimeControlData(struct soap*, const char*, struct __ns1__loadTimeControlData *, const char*);
SOAP_FMAC1 struct __ns1__loadTimeControlData * SOAP_FMAC2 soap_instantiate___ns1__loadTimeControlData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__loadTimeControlData * soap_new___ns1__loadTimeControlData(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__loadTimeControlData(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__loadTimeControlData * soap_new_req___ns1__loadTimeControlData(
	struct soap *soap)
{
	struct __ns1__loadTimeControlData *_p = soap_new___ns1__loadTimeControlData(soap);
	if (_p)
	{	soap_default___ns1__loadTimeControlData(soap, _p);
	}
	return _p;
}

inline struct __ns1__loadTimeControlData * soap_new_set___ns1__loadTimeControlData(
	struct soap *soap,
	_ns1__loadTimeControlData *ns1__loadTimeControlData)
{
	struct __ns1__loadTimeControlData *_p = soap_new___ns1__loadTimeControlData(soap);
	if (_p)
	{	soap_default___ns1__loadTimeControlData(soap, _p);
		_p->ns1__loadTimeControlData = ns1__loadTimeControlData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__loadTimeControlData(struct soap*, const struct __ns1__loadTimeControlData *, const char*, const char*);

inline int soap_write___ns1__loadTimeControlData(struct soap *soap, struct __ns1__loadTimeControlData const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__loadTimeControlData(soap, p), 0) || soap_put___ns1__loadTimeControlData(soap, p, "-ns1:loadTimeControlData", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__loadTimeControlData * SOAP_FMAC4 soap_get___ns1__loadTimeControlData(struct soap*, struct __ns1__loadTimeControlData *, const char*, const char*);

inline int soap_read___ns1__loadTimeControlData(struct soap *soap, struct __ns1__loadTimeControlData *p)
{
	if (p)
	{	soap_default___ns1__loadTimeControlData(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__loadTimeControlData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__bindAssembly_DEFINED
#define SOAP_TYPE___ns1__bindAssembly_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__bindAssembly(struct soap*, struct __ns1__bindAssembly *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__bindAssembly(struct soap*, const struct __ns1__bindAssembly *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__bindAssembly(struct soap*, const char*, int, const struct __ns1__bindAssembly *, const char*);
SOAP_FMAC3 struct __ns1__bindAssembly * SOAP_FMAC4 soap_in___ns1__bindAssembly(struct soap*, const char*, struct __ns1__bindAssembly *, const char*);
SOAP_FMAC1 struct __ns1__bindAssembly * SOAP_FMAC2 soap_instantiate___ns1__bindAssembly(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__bindAssembly * soap_new___ns1__bindAssembly(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__bindAssembly(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__bindAssembly * soap_new_req___ns1__bindAssembly(
	struct soap *soap)
{
	struct __ns1__bindAssembly *_p = soap_new___ns1__bindAssembly(soap);
	if (_p)
	{	soap_default___ns1__bindAssembly(soap, _p);
	}
	return _p;
}

inline struct __ns1__bindAssembly * soap_new_set___ns1__bindAssembly(
	struct soap *soap,
	_ns1__bindAssembly *ns1__bindAssembly)
{
	struct __ns1__bindAssembly *_p = soap_new___ns1__bindAssembly(soap);
	if (_p)
	{	soap_default___ns1__bindAssembly(soap, _p);
		_p->ns1__bindAssembly = ns1__bindAssembly;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__bindAssembly(struct soap*, const struct __ns1__bindAssembly *, const char*, const char*);

inline int soap_write___ns1__bindAssembly(struct soap *soap, struct __ns1__bindAssembly const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__bindAssembly(soap, p), 0) || soap_put___ns1__bindAssembly(soap, p, "-ns1:bindAssembly", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__bindAssembly * SOAP_FMAC4 soap_get___ns1__bindAssembly(struct soap*, struct __ns1__bindAssembly *, const char*, const char*);

inline int soap_read___ns1__bindAssembly(struct soap *soap, struct __ns1__bindAssembly *p)
{
	if (p)
	{	soap_default___ns1__bindAssembly(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__bindAssembly(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__SnSaveTechProcess_DEFINED
#define SOAP_TYPE___ns1__SnSaveTechProcess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SnSaveTechProcess(struct soap*, struct __ns1__SnSaveTechProcess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SnSaveTechProcess(struct soap*, const struct __ns1__SnSaveTechProcess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SnSaveTechProcess(struct soap*, const char*, int, const struct __ns1__SnSaveTechProcess *, const char*);
SOAP_FMAC3 struct __ns1__SnSaveTechProcess * SOAP_FMAC4 soap_in___ns1__SnSaveTechProcess(struct soap*, const char*, struct __ns1__SnSaveTechProcess *, const char*);
SOAP_FMAC1 struct __ns1__SnSaveTechProcess * SOAP_FMAC2 soap_instantiate___ns1__SnSaveTechProcess(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SnSaveTechProcess * soap_new___ns1__SnSaveTechProcess(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__SnSaveTechProcess(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__SnSaveTechProcess * soap_new_req___ns1__SnSaveTechProcess(
	struct soap *soap)
{
	struct __ns1__SnSaveTechProcess *_p = soap_new___ns1__SnSaveTechProcess(soap);
	if (_p)
	{	soap_default___ns1__SnSaveTechProcess(soap, _p);
	}
	return _p;
}

inline struct __ns1__SnSaveTechProcess * soap_new_set___ns1__SnSaveTechProcess(
	struct soap *soap,
	_ns1__SnSaveTechProcess *ns1__SnSaveTechProcess)
{
	struct __ns1__SnSaveTechProcess *_p = soap_new___ns1__SnSaveTechProcess(soap);
	if (_p)
	{	soap_default___ns1__SnSaveTechProcess(soap, _p);
		_p->ns1__SnSaveTechProcess = ns1__SnSaveTechProcess;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SnSaveTechProcess(struct soap*, const struct __ns1__SnSaveTechProcess *, const char*, const char*);

inline int soap_write___ns1__SnSaveTechProcess(struct soap *soap, struct __ns1__SnSaveTechProcess const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || (soap_serialize___ns1__SnSaveTechProcess(soap, p), 0) || soap_put___ns1__SnSaveTechProcess(soap, p, "-ns1:SnSaveTechProcess", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__SnSaveTechProcess * SOAP_FMAC4 soap_get___ns1__SnSaveTechProcess(struct soap*, struct __ns1__SnSaveTechProcess *, const char*, const char*);

inline int soap_read___ns1__SnSaveTechProcess(struct soap *soap, struct __ns1__SnSaveTechProcess *p)
{
	if (p)
	{	soap_default___ns1__SnSaveTechProcess(soap, p);
		if (soap_begin_recv(soap) || soap_get___ns1__SnSaveTechProcess(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__CheckTimeGap_DEFINED
#define SOAP_TYPE_PointerTo_ns1__CheckTimeGap_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CheckTimeGap(struct soap*, const char *, int, _ns1__CheckTimeGap *const*, const char *);
SOAP_FMAC3 _ns1__CheckTimeGap ** SOAP_FMAC4 soap_in_PointerTo_ns1__CheckTimeGap(struct soap*, const char*, _ns1__CheckTimeGap **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap *const*, const char*, const char*);
SOAP_FMAC3 _ns1__CheckTimeGap ** SOAP_FMAC4 soap_get_PointerTo_ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Ispasspostburnin_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Ispasspostburnin_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Ispasspostburnin(struct soap*, const char *, int, _ns1__Ispasspostburnin *const*, const char *);
SOAP_FMAC3 _ns1__Ispasspostburnin ** SOAP_FMAC4 soap_in_PointerTo_ns1__Ispasspostburnin(struct soap*, const char*, _ns1__Ispasspostburnin **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Ispasspostburnin ** SOAP_FMAC4 soap_get_PointerTo_ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkingSNNextRoute_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkingSNNextRoute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkingSNNextRoute(struct soap*, const char *, int, _ns1__checkingSNNextRoute *const*, const char *);
SOAP_FMAC3 _ns1__checkingSNNextRoute ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkingSNNextRoute(struct soap*, const char*, _ns1__checkingSNNextRoute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkingSNNextRoute ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__blakeTestExchangeData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__blakeTestExchangeData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__blakeTestExchangeData(struct soap*, const char *, int, _ns1__blakeTestExchangeData *const*, const char *);
SOAP_FMAC3 _ns1__blakeTestExchangeData ** SOAP_FMAC4 soap_in_PointerTo_ns1__blakeTestExchangeData(struct soap*, const char*, _ns1__blakeTestExchangeData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeData ** SOAP_FMAC4 soap_get_PointerTo_ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__goNewRouteseq_DEFINED
#define SOAP_TYPE_PointerTo_ns1__goNewRouteseq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__goNewRouteseq(struct soap*, const char *, int, _ns1__goNewRouteseq *const*, const char *);
SOAP_FMAC3 _ns1__goNewRouteseq ** SOAP_FMAC4 soap_in_PointerTo_ns1__goNewRouteseq(struct soap*, const char*, _ns1__goNewRouteseq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq *const*, const char*, const char*);
SOAP_FMAC3 _ns1__goNewRouteseq ** SOAP_FMAC4 soap_get_PointerTo_ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__fetchSnCurrentLocation_DEFINED
#define SOAP_TYPE_PointerTo_ns1__fetchSnCurrentLocation_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__fetchSnCurrentLocation(struct soap*, const char *, int, _ns1__fetchSnCurrentLocation *const*, const char *);
SOAP_FMAC3 _ns1__fetchSnCurrentLocation ** SOAP_FMAC4 soap_in_PointerTo_ns1__fetchSnCurrentLocation(struct soap*, const char*, _ns1__fetchSnCurrentLocation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation *const*, const char*, const char*);
SOAP_FMAC3 _ns1__fetchSnCurrentLocation ** SOAP_FMAC4 soap_get_PointerTo_ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getMaintanceParm_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getMaintanceParm_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getMaintanceParm(struct soap*, const char *, int, _ns1__getMaintanceParm *const*, const char *);
SOAP_FMAC3 _ns1__getMaintanceParm ** SOAP_FMAC4 soap_in_PointerTo_ns1__getMaintanceParm(struct soap*, const char*, _ns1__getMaintanceParm **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getMaintanceParm ** SOAP_FMAC4 soap_get_PointerTo_ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkMac_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkMac_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkMac(struct soap*, _ns1__checkMac *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkMac(struct soap*, const char *, int, _ns1__checkMac *const*, const char *);
SOAP_FMAC3 _ns1__checkMac ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkMac(struct soap*, const char*, _ns1__checkMac **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkMac(struct soap*, _ns1__checkMac *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkMac ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkMac(struct soap*, _ns1__checkMac **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsertTimeControl_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsertTimeControl_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsertTimeControl(struct soap*, const char *, int, _ns1__InsertTimeControl *const*, const char *);
SOAP_FMAC3 _ns1__InsertTimeControl ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsertTimeControl(struct soap*, const char*, _ns1__InsertTimeControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsertTimeControl ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__blakeTestExchangeData1_DEFINED
#define SOAP_TYPE_PointerTo_ns1__blakeTestExchangeData1_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1 *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__blakeTestExchangeData1(struct soap*, const char *, int, _ns1__blakeTestExchangeData1 *const*, const char *);
SOAP_FMAC3 _ns1__blakeTestExchangeData1 ** SOAP_FMAC4 soap_in_PointerTo_ns1__blakeTestExchangeData1(struct soap*, const char*, _ns1__blakeTestExchangeData1 **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1 *const*, const char*, const char*);
SOAP_FMAC3 _ns1__blakeTestExchangeData1 ** SOAP_FMAC4 soap_get_PointerTo_ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1 **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__InsertPRateData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__InsertPRateData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__InsertPRateData(struct soap*, const char *, int, _ns1__InsertPRateData *const*, const char *);
SOAP_FMAC3 _ns1__InsertPRateData ** SOAP_FMAC4 soap_in_PointerTo_ns1__InsertPRateData(struct soap*, const char*, _ns1__InsertPRateData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__InsertPRateData ** SOAP_FMAC4 soap_get_PointerTo_ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__getAssemblyData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__getAssemblyData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__getAssemblyData(struct soap*, const char *, int, _ns1__getAssemblyData *const*, const char *);
SOAP_FMAC3 _ns1__getAssemblyData ** SOAP_FMAC4 soap_in_PointerTo_ns1__getAssemblyData(struct soap*, const char*, _ns1__getAssemblyData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__getAssemblyData ** SOAP_FMAC4 soap_get_PointerTo_ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__staffCheck_DEFINED
#define SOAP_TYPE_PointerTo_ns1__staffCheck_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__staffCheck(struct soap*, _ns1__staffCheck *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__staffCheck(struct soap*, const char *, int, _ns1__staffCheck *const*, const char *);
SOAP_FMAC3 _ns1__staffCheck ** SOAP_FMAC4 soap_in_PointerTo_ns1__staffCheck(struct soap*, const char*, _ns1__staffCheck **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__staffCheck(struct soap*, _ns1__staffCheck *const*, const char*, const char*);
SOAP_FMAC3 _ns1__staffCheck ** SOAP_FMAC4 soap_get_PointerTo_ns1__staffCheck(struct soap*, _ns1__staffCheck **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SnSaveTechProcess_USCOREA_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SnSaveTechProcess_USCOREA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SnSaveTechProcess_USCOREA(struct soap*, const char *, int, _ns1__SnSaveTechProcess_USCOREA *const*, const char *);
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREA ** SOAP_FMAC4 soap_in_PointerTo_ns1__SnSaveTechProcess_USCOREA(struct soap*, const char*, _ns1__SnSaveTechProcess_USCOREA **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcess_USCOREA ** SOAP_FMAC4 soap_get_PointerTo_ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkSNPangusOrderNo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkSNPangusOrderNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkSNPangusOrderNo(struct soap*, const char *, int, _ns1__checkSNPangusOrderNo *const*, const char *);
SOAP_FMAC3 _ns1__checkSNPangusOrderNo ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkSNPangusOrderNo(struct soap*, const char*, _ns1__checkSNPangusOrderNo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkSNPangusOrderNo ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__checkSNOrderNo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__checkSNOrderNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__checkSNOrderNo(struct soap*, const char *, int, _ns1__checkSNOrderNo *const*, const char *);
SOAP_FMAC3 _ns1__checkSNOrderNo ** SOAP_FMAC4 soap_in_PointerTo_ns1__checkSNOrderNo(struct soap*, const char*, _ns1__checkSNOrderNo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__checkSNOrderNo ** SOAP_FMAC4 soap_get_PointerTo_ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__loadNgPanelNo_DEFINED
#define SOAP_TYPE_PointerTo_ns1__loadNgPanelNo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loadNgPanelNo(struct soap*, const char *, int, _ns1__loadNgPanelNo *const*, const char *);
SOAP_FMAC3 _ns1__loadNgPanelNo ** SOAP_FMAC4 soap_in_PointerTo_ns1__loadNgPanelNo(struct soap*, const char*, _ns1__loadNgPanelNo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo *const*, const char*, const char*);
SOAP_FMAC3 _ns1__loadNgPanelNo ** SOAP_FMAC4 soap_get_PointerTo_ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__loadTimeControlData_DEFINED
#define SOAP_TYPE_PointerTo_ns1__loadTimeControlData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loadTimeControlData(struct soap*, const char *, int, _ns1__loadTimeControlData *const*, const char *);
SOAP_FMAC3 _ns1__loadTimeControlData ** SOAP_FMAC4 soap_in_PointerTo_ns1__loadTimeControlData(struct soap*, const char*, _ns1__loadTimeControlData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData *const*, const char*, const char*);
SOAP_FMAC3 _ns1__loadTimeControlData ** SOAP_FMAC4 soap_get_PointerTo_ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__bindAssembly_DEFINED
#define SOAP_TYPE_PointerTo_ns1__bindAssembly_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__bindAssembly(struct soap*, _ns1__bindAssembly *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__bindAssembly(struct soap*, const char *, int, _ns1__bindAssembly *const*, const char *);
SOAP_FMAC3 _ns1__bindAssembly ** SOAP_FMAC4 soap_in_PointerTo_ns1__bindAssembly(struct soap*, const char*, _ns1__bindAssembly **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__bindAssembly(struct soap*, _ns1__bindAssembly *const*, const char*, const char*);
SOAP_FMAC3 _ns1__bindAssembly ** SOAP_FMAC4 soap_get_PointerTo_ns1__bindAssembly(struct soap*, _ns1__bindAssembly **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__SnSaveTechProcess_DEFINED
#define SOAP_TYPE_PointerTo_ns1__SnSaveTechProcess_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SnSaveTechProcess(struct soap*, const char *, int, _ns1__SnSaveTechProcess *const*, const char *);
SOAP_FMAC3 _ns1__SnSaveTechProcess ** SOAP_FMAC4 soap_in_PointerTo_ns1__SnSaveTechProcess(struct soap*, const char*, _ns1__SnSaveTechProcess **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess *const*, const char*, const char*);
SOAP_FMAC3 _ns1__SnSaveTechProcess ** SOAP_FMAC4 soap_get_PointerTo_ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const *p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
