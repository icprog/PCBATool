/* WebService.h
   Generated by wsdl2h 2.8.31 from byd.wsdl and typemap.dat
   2016-05-07 10:38:35 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on WebService.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://xfire.zxw                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://xfire.zxw"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://xfire.zxw"
//gsoap ns1   schema namespace:	http://xfire.zxw
//gsoap ns1   schema form:	qualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__SnSaveTechProcess.
class _ns1__SnSaveTechProcess;

//  Forward declaration of class _ns1__SnSaveTechProcessResponse.
class _ns1__SnSaveTechProcessResponse;

//  Forward declaration of class _ns1__bindAssembly.
class _ns1__bindAssembly;

//  Forward declaration of class _ns1__bindAssemblyResponse.
class _ns1__bindAssemblyResponse;

//  Forward declaration of class _ns1__loadTimeControlData.
class _ns1__loadTimeControlData;

//  Forward declaration of class _ns1__loadTimeControlDataResponse.
class _ns1__loadTimeControlDataResponse;

//  Forward declaration of class _ns1__loadNgPanelNo.
class _ns1__loadNgPanelNo;

//  Forward declaration of class _ns1__loadNgPanelNoResponse.
class _ns1__loadNgPanelNoResponse;

//  Forward declaration of class _ns1__checkSNOrderNo.
class _ns1__checkSNOrderNo;

//  Forward declaration of class _ns1__checkSNOrderNoResponse.
class _ns1__checkSNOrderNoResponse;

//  Forward declaration of class _ns1__checkSNPangusOrderNo.
class _ns1__checkSNPangusOrderNo;

//  Forward declaration of class _ns1__checkSNPangusOrderNoResponse.
class _ns1__checkSNPangusOrderNoResponse;

//  Forward declaration of class _ns1__SnSaveTechProcess_USCOREA.
class _ns1__SnSaveTechProcess_USCOREA;

//  Forward declaration of class _ns1__SnSaveTechProcess_USCOREAResponse.
class _ns1__SnSaveTechProcess_USCOREAResponse;

//  Forward declaration of class _ns1__staffCheck.
class _ns1__staffCheck;

//  Forward declaration of class _ns1__staffCheckResponse.
class _ns1__staffCheckResponse;

//  Forward declaration of class _ns1__getAssemblyData.
class _ns1__getAssemblyData;

//  Forward declaration of class _ns1__getAssemblyDataResponse.
class _ns1__getAssemblyDataResponse;

//  Forward declaration of class _ns1__InsertPRateData.
class _ns1__InsertPRateData;

//  Forward declaration of class _ns1__InsertPRateDataResponse.
class _ns1__InsertPRateDataResponse;

//  Forward declaration of class _ns1__blakeTestExchangeData1.
class _ns1__blakeTestExchangeData1;

//  Forward declaration of class _ns1__blakeTestExchangeData1Response.
class _ns1__blakeTestExchangeData1Response;

//  Forward declaration of class _ns1__InsertTimeControl.
class _ns1__InsertTimeControl;

//  Forward declaration of class _ns1__InsertTimeControlResponse.
class _ns1__InsertTimeControlResponse;

//  Forward declaration of class _ns1__checkMac.
class _ns1__checkMac;

//  Forward declaration of class _ns1__checkMacResponse.
class _ns1__checkMacResponse;

//  Forward declaration of class _ns1__getMaintanceParm.
class _ns1__getMaintanceParm;

//  Forward declaration of class _ns1__getMaintanceParmResponse.
class _ns1__getMaintanceParmResponse;

//  Forward declaration of class _ns1__fetchSnCurrentLocation.
class _ns1__fetchSnCurrentLocation;

//  Forward declaration of class _ns1__fetchSnCurrentLocationResponse.
class _ns1__fetchSnCurrentLocationResponse;

//  Forward declaration of class _ns1__goNewRouteseq.
class _ns1__goNewRouteseq;

//  Forward declaration of class _ns1__goNewRouteseqResponse.
class _ns1__goNewRouteseqResponse;

//  Forward declaration of class _ns1__blakeTestExchangeData.
class _ns1__blakeTestExchangeData;

//  Forward declaration of class _ns1__blakeTestExchangeDataResponse.
class _ns1__blakeTestExchangeDataResponse;

//  Forward declaration of class _ns1__checkingSNNextRoute.
class _ns1__checkingSNNextRoute;

//  Forward declaration of class _ns1__checkingSNNextRouteResponse.
class _ns1__checkingSNNextRouteResponse;

//  Forward declaration of class _ns1__Ispasspostburnin.
class _ns1__Ispasspostburnin;

//  Forward declaration of class _ns1__IspasspostburninResponse.
class _ns1__IspasspostburninResponse;

//  Forward declaration of class _ns1__CheckTimeGap.
class _ns1__CheckTimeGap;

//  Forward declaration of class _ns1__CheckTimeGapResponse.
class _ns1__CheckTimeGapResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://xfire.zxw                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://xfire.zxw                                                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://xfire.zxw":SnSaveTechProcess
/// @brief "http://xfire.zxw":SnSaveTechProcess is a complexType.
///
/// class _ns1__SnSaveTechProcess operations:
/// - _ns1__SnSaveTechProcess* soap_new__ns1__SnSaveTechProcess(soap*) allocate
/// - _ns1__SnSaveTechProcess* soap_new__ns1__SnSaveTechProcess(soap*, int num) allocate array
/// - _ns1__SnSaveTechProcess* soap_new_req__ns1__SnSaveTechProcess(soap*, ...) allocate, set required members
/// - _ns1__SnSaveTechProcess* soap_new_set__ns1__SnSaveTechProcess(soap*, ...) allocate, set all public members
/// - _ns1__SnSaveTechProcess::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SnSaveTechProcess(soap*, _ns1__SnSaveTechProcess*) deserialize from a stream
/// - int soap_write__ns1__SnSaveTechProcess(soap*, _ns1__SnSaveTechProcess*) serialize to a stream
/// - _ns1__SnSaveTechProcess* _ns1__SnSaveTechProcess::soap_dup(soap*) returns deep copy of _ns1__SnSaveTechProcess, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SnSaveTechProcess::soap_del() deep deletes _ns1__SnSaveTechProcess data members, use only after _ns1__SnSaveTechProcess::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SnSaveTechProcess
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in3" of XSD type xs:string.
    std::string*                         in3                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in4" of XSD type xs:string.
    std::string*                         in4                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in5" of XSD type xs:string.
    std::string*                         in5                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in6" of XSD type xs:string.
    std::string*                         in6                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in7" of XSD type xs:string.
    std::string*                         in7                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":SnSaveTechProcessResponse
/// @brief "http://xfire.zxw":SnSaveTechProcessResponse is a complexType.
///
/// class _ns1__SnSaveTechProcessResponse operations:
/// - _ns1__SnSaveTechProcessResponse* soap_new__ns1__SnSaveTechProcessResponse(soap*) allocate
/// - _ns1__SnSaveTechProcessResponse* soap_new__ns1__SnSaveTechProcessResponse(soap*, int num) allocate array
/// - _ns1__SnSaveTechProcessResponse* soap_new_req__ns1__SnSaveTechProcessResponse(soap*, ...) allocate, set required members
/// - _ns1__SnSaveTechProcessResponse* soap_new_set__ns1__SnSaveTechProcessResponse(soap*, ...) allocate, set all public members
/// - _ns1__SnSaveTechProcessResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SnSaveTechProcessResponse(soap*, _ns1__SnSaveTechProcessResponse*) deserialize from a stream
/// - int soap_write__ns1__SnSaveTechProcessResponse(soap*, _ns1__SnSaveTechProcessResponse*) serialize to a stream
/// - _ns1__SnSaveTechProcessResponse* _ns1__SnSaveTechProcessResponse::soap_dup(soap*) returns deep copy of _ns1__SnSaveTechProcessResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SnSaveTechProcessResponse::soap_del() deep deletes _ns1__SnSaveTechProcessResponse data members, use only after _ns1__SnSaveTechProcessResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SnSaveTechProcessResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":bindAssembly
/// @brief "http://xfire.zxw":bindAssembly is a complexType.
///
/// class _ns1__bindAssembly operations:
/// - _ns1__bindAssembly* soap_new__ns1__bindAssembly(soap*) allocate
/// - _ns1__bindAssembly* soap_new__ns1__bindAssembly(soap*, int num) allocate array
/// - _ns1__bindAssembly* soap_new_req__ns1__bindAssembly(soap*, ...) allocate, set required members
/// - _ns1__bindAssembly* soap_new_set__ns1__bindAssembly(soap*, ...) allocate, set all public members
/// - _ns1__bindAssembly::soap_default(soap*) reset members to default
/// - int soap_read__ns1__bindAssembly(soap*, _ns1__bindAssembly*) deserialize from a stream
/// - int soap_write__ns1__bindAssembly(soap*, _ns1__bindAssembly*) serialize to a stream
/// - _ns1__bindAssembly* _ns1__bindAssembly::soap_dup(soap*) returns deep copy of _ns1__bindAssembly, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__bindAssembly::soap_del() deep deletes _ns1__bindAssembly data members, use only after _ns1__bindAssembly::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__bindAssembly
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":bindAssemblyResponse
/// @brief "http://xfire.zxw":bindAssemblyResponse is a complexType.
///
/// class _ns1__bindAssemblyResponse operations:
/// - _ns1__bindAssemblyResponse* soap_new__ns1__bindAssemblyResponse(soap*) allocate
/// - _ns1__bindAssemblyResponse* soap_new__ns1__bindAssemblyResponse(soap*, int num) allocate array
/// - _ns1__bindAssemblyResponse* soap_new_req__ns1__bindAssemblyResponse(soap*, ...) allocate, set required members
/// - _ns1__bindAssemblyResponse* soap_new_set__ns1__bindAssemblyResponse(soap*, ...) allocate, set all public members
/// - _ns1__bindAssemblyResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__bindAssemblyResponse(soap*, _ns1__bindAssemblyResponse*) deserialize from a stream
/// - int soap_write__ns1__bindAssemblyResponse(soap*, _ns1__bindAssemblyResponse*) serialize to a stream
/// - _ns1__bindAssemblyResponse* _ns1__bindAssemblyResponse::soap_dup(soap*) returns deep copy of _ns1__bindAssemblyResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__bindAssemblyResponse::soap_del() deep deletes _ns1__bindAssemblyResponse data members, use only after _ns1__bindAssemblyResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__bindAssemblyResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":loadTimeControlData
/// @brief "http://xfire.zxw":loadTimeControlData is a complexType.
///
/// class _ns1__loadTimeControlData operations:
/// - _ns1__loadTimeControlData* soap_new__ns1__loadTimeControlData(soap*) allocate
/// - _ns1__loadTimeControlData* soap_new__ns1__loadTimeControlData(soap*, int num) allocate array
/// - _ns1__loadTimeControlData* soap_new_req__ns1__loadTimeControlData(soap*, ...) allocate, set required members
/// - _ns1__loadTimeControlData* soap_new_set__ns1__loadTimeControlData(soap*, ...) allocate, set all public members
/// - _ns1__loadTimeControlData::soap_default(soap*) reset members to default
/// - int soap_read__ns1__loadTimeControlData(soap*, _ns1__loadTimeControlData*) deserialize from a stream
/// - int soap_write__ns1__loadTimeControlData(soap*, _ns1__loadTimeControlData*) serialize to a stream
/// - _ns1__loadTimeControlData* _ns1__loadTimeControlData::soap_dup(soap*) returns deep copy of _ns1__loadTimeControlData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__loadTimeControlData::soap_del() deep deletes _ns1__loadTimeControlData data members, use only after _ns1__loadTimeControlData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__loadTimeControlData
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":loadTimeControlDataResponse
/// @brief "http://xfire.zxw":loadTimeControlDataResponse is a complexType.
///
/// class _ns1__loadTimeControlDataResponse operations:
/// - _ns1__loadTimeControlDataResponse* soap_new__ns1__loadTimeControlDataResponse(soap*) allocate
/// - _ns1__loadTimeControlDataResponse* soap_new__ns1__loadTimeControlDataResponse(soap*, int num) allocate array
/// - _ns1__loadTimeControlDataResponse* soap_new_req__ns1__loadTimeControlDataResponse(soap*, ...) allocate, set required members
/// - _ns1__loadTimeControlDataResponse* soap_new_set__ns1__loadTimeControlDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__loadTimeControlDataResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__loadTimeControlDataResponse(soap*, _ns1__loadTimeControlDataResponse*) deserialize from a stream
/// - int soap_write__ns1__loadTimeControlDataResponse(soap*, _ns1__loadTimeControlDataResponse*) serialize to a stream
/// - _ns1__loadTimeControlDataResponse* _ns1__loadTimeControlDataResponse::soap_dup(soap*) returns deep copy of _ns1__loadTimeControlDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__loadTimeControlDataResponse::soap_del() deep deletes _ns1__loadTimeControlDataResponse data members, use only after _ns1__loadTimeControlDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__loadTimeControlDataResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":loadNgPanelNo
/// @brief "http://xfire.zxw":loadNgPanelNo is a complexType.
///
/// class _ns1__loadNgPanelNo operations:
/// - _ns1__loadNgPanelNo* soap_new__ns1__loadNgPanelNo(soap*) allocate
/// - _ns1__loadNgPanelNo* soap_new__ns1__loadNgPanelNo(soap*, int num) allocate array
/// - _ns1__loadNgPanelNo* soap_new_req__ns1__loadNgPanelNo(soap*, ...) allocate, set required members
/// - _ns1__loadNgPanelNo* soap_new_set__ns1__loadNgPanelNo(soap*, ...) allocate, set all public members
/// - _ns1__loadNgPanelNo::soap_default(soap*) reset members to default
/// - int soap_read__ns1__loadNgPanelNo(soap*, _ns1__loadNgPanelNo*) deserialize from a stream
/// - int soap_write__ns1__loadNgPanelNo(soap*, _ns1__loadNgPanelNo*) serialize to a stream
/// - _ns1__loadNgPanelNo* _ns1__loadNgPanelNo::soap_dup(soap*) returns deep copy of _ns1__loadNgPanelNo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__loadNgPanelNo::soap_del() deep deletes _ns1__loadNgPanelNo data members, use only after _ns1__loadNgPanelNo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__loadNgPanelNo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":loadNgPanelNoResponse
/// @brief "http://xfire.zxw":loadNgPanelNoResponse is a complexType.
///
/// class _ns1__loadNgPanelNoResponse operations:
/// - _ns1__loadNgPanelNoResponse* soap_new__ns1__loadNgPanelNoResponse(soap*) allocate
/// - _ns1__loadNgPanelNoResponse* soap_new__ns1__loadNgPanelNoResponse(soap*, int num) allocate array
/// - _ns1__loadNgPanelNoResponse* soap_new_req__ns1__loadNgPanelNoResponse(soap*, ...) allocate, set required members
/// - _ns1__loadNgPanelNoResponse* soap_new_set__ns1__loadNgPanelNoResponse(soap*, ...) allocate, set all public members
/// - _ns1__loadNgPanelNoResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__loadNgPanelNoResponse(soap*, _ns1__loadNgPanelNoResponse*) deserialize from a stream
/// - int soap_write__ns1__loadNgPanelNoResponse(soap*, _ns1__loadNgPanelNoResponse*) serialize to a stream
/// - _ns1__loadNgPanelNoResponse* _ns1__loadNgPanelNoResponse::soap_dup(soap*) returns deep copy of _ns1__loadNgPanelNoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__loadNgPanelNoResponse::soap_del() deep deletes _ns1__loadNgPanelNoResponse data members, use only after _ns1__loadNgPanelNoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__loadNgPanelNoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkSNOrderNo
/// @brief "http://xfire.zxw":checkSNOrderNo is a complexType.
///
/// class _ns1__checkSNOrderNo operations:
/// - _ns1__checkSNOrderNo* soap_new__ns1__checkSNOrderNo(soap*) allocate
/// - _ns1__checkSNOrderNo* soap_new__ns1__checkSNOrderNo(soap*, int num) allocate array
/// - _ns1__checkSNOrderNo* soap_new_req__ns1__checkSNOrderNo(soap*, ...) allocate, set required members
/// - _ns1__checkSNOrderNo* soap_new_set__ns1__checkSNOrderNo(soap*, ...) allocate, set all public members
/// - _ns1__checkSNOrderNo::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkSNOrderNo(soap*, _ns1__checkSNOrderNo*) deserialize from a stream
/// - int soap_write__ns1__checkSNOrderNo(soap*, _ns1__checkSNOrderNo*) serialize to a stream
/// - _ns1__checkSNOrderNo* _ns1__checkSNOrderNo::soap_dup(soap*) returns deep copy of _ns1__checkSNOrderNo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkSNOrderNo::soap_del() deep deletes _ns1__checkSNOrderNo data members, use only after _ns1__checkSNOrderNo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkSNOrderNo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkSNOrderNoResponse
/// @brief "http://xfire.zxw":checkSNOrderNoResponse is a complexType.
///
/// class _ns1__checkSNOrderNoResponse operations:
/// - _ns1__checkSNOrderNoResponse* soap_new__ns1__checkSNOrderNoResponse(soap*) allocate
/// - _ns1__checkSNOrderNoResponse* soap_new__ns1__checkSNOrderNoResponse(soap*, int num) allocate array
/// - _ns1__checkSNOrderNoResponse* soap_new_req__ns1__checkSNOrderNoResponse(soap*, ...) allocate, set required members
/// - _ns1__checkSNOrderNoResponse* soap_new_set__ns1__checkSNOrderNoResponse(soap*, ...) allocate, set all public members
/// - _ns1__checkSNOrderNoResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkSNOrderNoResponse(soap*, _ns1__checkSNOrderNoResponse*) deserialize from a stream
/// - int soap_write__ns1__checkSNOrderNoResponse(soap*, _ns1__checkSNOrderNoResponse*) serialize to a stream
/// - _ns1__checkSNOrderNoResponse* _ns1__checkSNOrderNoResponse::soap_dup(soap*) returns deep copy of _ns1__checkSNOrderNoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkSNOrderNoResponse::soap_del() deep deletes _ns1__checkSNOrderNoResponse data members, use only after _ns1__checkSNOrderNoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkSNOrderNoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkSNPangusOrderNo
/// @brief "http://xfire.zxw":checkSNPangusOrderNo is a complexType.
///
/// class _ns1__checkSNPangusOrderNo operations:
/// - _ns1__checkSNPangusOrderNo* soap_new__ns1__checkSNPangusOrderNo(soap*) allocate
/// - _ns1__checkSNPangusOrderNo* soap_new__ns1__checkSNPangusOrderNo(soap*, int num) allocate array
/// - _ns1__checkSNPangusOrderNo* soap_new_req__ns1__checkSNPangusOrderNo(soap*, ...) allocate, set required members
/// - _ns1__checkSNPangusOrderNo* soap_new_set__ns1__checkSNPangusOrderNo(soap*, ...) allocate, set all public members
/// - _ns1__checkSNPangusOrderNo::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkSNPangusOrderNo(soap*, _ns1__checkSNPangusOrderNo*) deserialize from a stream
/// - int soap_write__ns1__checkSNPangusOrderNo(soap*, _ns1__checkSNPangusOrderNo*) serialize to a stream
/// - _ns1__checkSNPangusOrderNo* _ns1__checkSNPangusOrderNo::soap_dup(soap*) returns deep copy of _ns1__checkSNPangusOrderNo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkSNPangusOrderNo::soap_del() deep deletes _ns1__checkSNPangusOrderNo data members, use only after _ns1__checkSNPangusOrderNo::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkSNPangusOrderNo
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkSNPangusOrderNoResponse
/// @brief "http://xfire.zxw":checkSNPangusOrderNoResponse is a complexType.
///
/// class _ns1__checkSNPangusOrderNoResponse operations:
/// - _ns1__checkSNPangusOrderNoResponse* soap_new__ns1__checkSNPangusOrderNoResponse(soap*) allocate
/// - _ns1__checkSNPangusOrderNoResponse* soap_new__ns1__checkSNPangusOrderNoResponse(soap*, int num) allocate array
/// - _ns1__checkSNPangusOrderNoResponse* soap_new_req__ns1__checkSNPangusOrderNoResponse(soap*, ...) allocate, set required members
/// - _ns1__checkSNPangusOrderNoResponse* soap_new_set__ns1__checkSNPangusOrderNoResponse(soap*, ...) allocate, set all public members
/// - _ns1__checkSNPangusOrderNoResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkSNPangusOrderNoResponse(soap*, _ns1__checkSNPangusOrderNoResponse*) deserialize from a stream
/// - int soap_write__ns1__checkSNPangusOrderNoResponse(soap*, _ns1__checkSNPangusOrderNoResponse*) serialize to a stream
/// - _ns1__checkSNPangusOrderNoResponse* _ns1__checkSNPangusOrderNoResponse::soap_dup(soap*) returns deep copy of _ns1__checkSNPangusOrderNoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkSNPangusOrderNoResponse::soap_del() deep deletes _ns1__checkSNPangusOrderNoResponse data members, use only after _ns1__checkSNPangusOrderNoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkSNPangusOrderNoResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":SnSaveTechProcess_A
/// @brief "http://xfire.zxw":SnSaveTechProcess_A is a complexType.
///
/// class _ns1__SnSaveTechProcess_USCOREA operations:
/// - _ns1__SnSaveTechProcess_USCOREA* soap_new__ns1__SnSaveTechProcess_USCOREA(soap*) allocate
/// - _ns1__SnSaveTechProcess_USCOREA* soap_new__ns1__SnSaveTechProcess_USCOREA(soap*, int num) allocate array
/// - _ns1__SnSaveTechProcess_USCOREA* soap_new_req__ns1__SnSaveTechProcess_USCOREA(soap*, ...) allocate, set required members
/// - _ns1__SnSaveTechProcess_USCOREA* soap_new_set__ns1__SnSaveTechProcess_USCOREA(soap*, ...) allocate, set all public members
/// - _ns1__SnSaveTechProcess_USCOREA::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SnSaveTechProcess_USCOREA(soap*, _ns1__SnSaveTechProcess_USCOREA*) deserialize from a stream
/// - int soap_write__ns1__SnSaveTechProcess_USCOREA(soap*, _ns1__SnSaveTechProcess_USCOREA*) serialize to a stream
/// - _ns1__SnSaveTechProcess_USCOREA* _ns1__SnSaveTechProcess_USCOREA::soap_dup(soap*) returns deep copy of _ns1__SnSaveTechProcess_USCOREA, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SnSaveTechProcess_USCOREA::soap_del() deep deletes _ns1__SnSaveTechProcess_USCOREA data members, use only after _ns1__SnSaveTechProcess_USCOREA::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SnSaveTechProcess_USCOREA
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in3" of XSD type xs:string.
    std::string*                         in3                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in4" of XSD type xs:string.
    std::string*                         in4                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in5" of XSD type xs:string.
    std::string*                         in5                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in6" of XSD type xs:string.
    std::string*                         in6                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in7" of XSD type xs:string.
    std::string*                         in7                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in8" of XSD type xs:string.
    std::string*                         in8                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":SnSaveTechProcess_AResponse
/// @brief "http://xfire.zxw":SnSaveTechProcess_AResponse is a complexType.
///
/// class _ns1__SnSaveTechProcess_USCOREAResponse operations:
/// - _ns1__SnSaveTechProcess_USCOREAResponse* soap_new__ns1__SnSaveTechProcess_USCOREAResponse(soap*) allocate
/// - _ns1__SnSaveTechProcess_USCOREAResponse* soap_new__ns1__SnSaveTechProcess_USCOREAResponse(soap*, int num) allocate array
/// - _ns1__SnSaveTechProcess_USCOREAResponse* soap_new_req__ns1__SnSaveTechProcess_USCOREAResponse(soap*, ...) allocate, set required members
/// - _ns1__SnSaveTechProcess_USCOREAResponse* soap_new_set__ns1__SnSaveTechProcess_USCOREAResponse(soap*, ...) allocate, set all public members
/// - _ns1__SnSaveTechProcess_USCOREAResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__SnSaveTechProcess_USCOREAResponse(soap*, _ns1__SnSaveTechProcess_USCOREAResponse*) deserialize from a stream
/// - int soap_write__ns1__SnSaveTechProcess_USCOREAResponse(soap*, _ns1__SnSaveTechProcess_USCOREAResponse*) serialize to a stream
/// - _ns1__SnSaveTechProcess_USCOREAResponse* _ns1__SnSaveTechProcess_USCOREAResponse::soap_dup(soap*) returns deep copy of _ns1__SnSaveTechProcess_USCOREAResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__SnSaveTechProcess_USCOREAResponse::soap_del() deep deletes _ns1__SnSaveTechProcess_USCOREAResponse data members, use only after _ns1__SnSaveTechProcess_USCOREAResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__SnSaveTechProcess_USCOREAResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":staffCheck
/// @brief "http://xfire.zxw":staffCheck is a complexType.
///
/// class _ns1__staffCheck operations:
/// - _ns1__staffCheck* soap_new__ns1__staffCheck(soap*) allocate
/// - _ns1__staffCheck* soap_new__ns1__staffCheck(soap*, int num) allocate array
/// - _ns1__staffCheck* soap_new_req__ns1__staffCheck(soap*, ...) allocate, set required members
/// - _ns1__staffCheck* soap_new_set__ns1__staffCheck(soap*, ...) allocate, set all public members
/// - _ns1__staffCheck::soap_default(soap*) reset members to default
/// - int soap_read__ns1__staffCheck(soap*, _ns1__staffCheck*) deserialize from a stream
/// - int soap_write__ns1__staffCheck(soap*, _ns1__staffCheck*) serialize to a stream
/// - _ns1__staffCheck* _ns1__staffCheck::soap_dup(soap*) returns deep copy of _ns1__staffCheck, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__staffCheck::soap_del() deep deletes _ns1__staffCheck data members, use only after _ns1__staffCheck::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__staffCheck
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":staffCheckResponse
/// @brief "http://xfire.zxw":staffCheckResponse is a complexType.
///
/// class _ns1__staffCheckResponse operations:
/// - _ns1__staffCheckResponse* soap_new__ns1__staffCheckResponse(soap*) allocate
/// - _ns1__staffCheckResponse* soap_new__ns1__staffCheckResponse(soap*, int num) allocate array
/// - _ns1__staffCheckResponse* soap_new_req__ns1__staffCheckResponse(soap*, ...) allocate, set required members
/// - _ns1__staffCheckResponse* soap_new_set__ns1__staffCheckResponse(soap*, ...) allocate, set all public members
/// - _ns1__staffCheckResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__staffCheckResponse(soap*, _ns1__staffCheckResponse*) deserialize from a stream
/// - int soap_write__ns1__staffCheckResponse(soap*, _ns1__staffCheckResponse*) serialize to a stream
/// - _ns1__staffCheckResponse* _ns1__staffCheckResponse::soap_dup(soap*) returns deep copy of _ns1__staffCheckResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__staffCheckResponse::soap_del() deep deletes _ns1__staffCheckResponse data members, use only after _ns1__staffCheckResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__staffCheckResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":getAssemblyData
/// @brief "http://xfire.zxw":getAssemblyData is a complexType.
///
/// class _ns1__getAssemblyData operations:
/// - _ns1__getAssemblyData* soap_new__ns1__getAssemblyData(soap*) allocate
/// - _ns1__getAssemblyData* soap_new__ns1__getAssemblyData(soap*, int num) allocate array
/// - _ns1__getAssemblyData* soap_new_req__ns1__getAssemblyData(soap*, ...) allocate, set required members
/// - _ns1__getAssemblyData* soap_new_set__ns1__getAssemblyData(soap*, ...) allocate, set all public members
/// - _ns1__getAssemblyData::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAssemblyData(soap*, _ns1__getAssemblyData*) deserialize from a stream
/// - int soap_write__ns1__getAssemblyData(soap*, _ns1__getAssemblyData*) serialize to a stream
/// - _ns1__getAssemblyData* _ns1__getAssemblyData::soap_dup(soap*) returns deep copy of _ns1__getAssemblyData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAssemblyData::soap_del() deep deletes _ns1__getAssemblyData data members, use only after _ns1__getAssemblyData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAssemblyData
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":getAssemblyDataResponse
/// @brief "http://xfire.zxw":getAssemblyDataResponse is a complexType.
///
/// class _ns1__getAssemblyDataResponse operations:
/// - _ns1__getAssemblyDataResponse* soap_new__ns1__getAssemblyDataResponse(soap*) allocate
/// - _ns1__getAssemblyDataResponse* soap_new__ns1__getAssemblyDataResponse(soap*, int num) allocate array
/// - _ns1__getAssemblyDataResponse* soap_new_req__ns1__getAssemblyDataResponse(soap*, ...) allocate, set required members
/// - _ns1__getAssemblyDataResponse* soap_new_set__ns1__getAssemblyDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__getAssemblyDataResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getAssemblyDataResponse(soap*, _ns1__getAssemblyDataResponse*) deserialize from a stream
/// - int soap_write__ns1__getAssemblyDataResponse(soap*, _ns1__getAssemblyDataResponse*) serialize to a stream
/// - _ns1__getAssemblyDataResponse* _ns1__getAssemblyDataResponse::soap_dup(soap*) returns deep copy of _ns1__getAssemblyDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getAssemblyDataResponse::soap_del() deep deletes _ns1__getAssemblyDataResponse data members, use only after _ns1__getAssemblyDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getAssemblyDataResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":InsertPRateData
/// @brief "http://xfire.zxw":InsertPRateData is a complexType.
///
/// class _ns1__InsertPRateData operations:
/// - _ns1__InsertPRateData* soap_new__ns1__InsertPRateData(soap*) allocate
/// - _ns1__InsertPRateData* soap_new__ns1__InsertPRateData(soap*, int num) allocate array
/// - _ns1__InsertPRateData* soap_new_req__ns1__InsertPRateData(soap*, ...) allocate, set required members
/// - _ns1__InsertPRateData* soap_new_set__ns1__InsertPRateData(soap*, ...) allocate, set all public members
/// - _ns1__InsertPRateData::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InsertPRateData(soap*, _ns1__InsertPRateData*) deserialize from a stream
/// - int soap_write__ns1__InsertPRateData(soap*, _ns1__InsertPRateData*) serialize to a stream
/// - _ns1__InsertPRateData* _ns1__InsertPRateData::soap_dup(soap*) returns deep copy of _ns1__InsertPRateData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InsertPRateData::soap_del() deep deletes _ns1__InsertPRateData data members, use only after _ns1__InsertPRateData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InsertPRateData
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in3" of XSD type xs:string.
    std::string*                         in3                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in4" of XSD type xs:string.
    std::string*                         in4                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in5" of XSD type xs:string.
    std::string*                         in5                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in6" of XSD type xs:string.
    std::string*                         in6                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in7" of XSD type xs:string.
    std::string*                         in7                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in8" of XSD type xs:string.
    std::string*                         in8                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in9" of XSD type xs:string.
    std::string*                         in9                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in10" of XSD type xs:string.
    std::string*                         in10                           1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":InsertPRateDataResponse
/// @brief "http://xfire.zxw":InsertPRateDataResponse is a complexType.
///
/// class _ns1__InsertPRateDataResponse operations:
/// - _ns1__InsertPRateDataResponse* soap_new__ns1__InsertPRateDataResponse(soap*) allocate
/// - _ns1__InsertPRateDataResponse* soap_new__ns1__InsertPRateDataResponse(soap*, int num) allocate array
/// - _ns1__InsertPRateDataResponse* soap_new_req__ns1__InsertPRateDataResponse(soap*, ...) allocate, set required members
/// - _ns1__InsertPRateDataResponse* soap_new_set__ns1__InsertPRateDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__InsertPRateDataResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InsertPRateDataResponse(soap*, _ns1__InsertPRateDataResponse*) deserialize from a stream
/// - int soap_write__ns1__InsertPRateDataResponse(soap*, _ns1__InsertPRateDataResponse*) serialize to a stream
/// - _ns1__InsertPRateDataResponse* _ns1__InsertPRateDataResponse::soap_dup(soap*) returns deep copy of _ns1__InsertPRateDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InsertPRateDataResponse::soap_del() deep deletes _ns1__InsertPRateDataResponse data members, use only after _ns1__InsertPRateDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InsertPRateDataResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":blakeTestExchangeData1
/// @brief "http://xfire.zxw":blakeTestExchangeData1 is a complexType.
///
/// class _ns1__blakeTestExchangeData1 operations:
/// - _ns1__blakeTestExchangeData1* soap_new__ns1__blakeTestExchangeData1(soap*) allocate
/// - _ns1__blakeTestExchangeData1* soap_new__ns1__blakeTestExchangeData1(soap*, int num) allocate array
/// - _ns1__blakeTestExchangeData1* soap_new_req__ns1__blakeTestExchangeData1(soap*, ...) allocate, set required members
/// - _ns1__blakeTestExchangeData1* soap_new_set__ns1__blakeTestExchangeData1(soap*, ...) allocate, set all public members
/// - _ns1__blakeTestExchangeData1::soap_default(soap*) reset members to default
/// - int soap_read__ns1__blakeTestExchangeData1(soap*, _ns1__blakeTestExchangeData1*) deserialize from a stream
/// - int soap_write__ns1__blakeTestExchangeData1(soap*, _ns1__blakeTestExchangeData1*) serialize to a stream
/// - _ns1__blakeTestExchangeData1* _ns1__blakeTestExchangeData1::soap_dup(soap*) returns deep copy of _ns1__blakeTestExchangeData1, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__blakeTestExchangeData1::soap_del() deep deletes _ns1__blakeTestExchangeData1 data members, use only after _ns1__blakeTestExchangeData1::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__blakeTestExchangeData1
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in3" of XSD type xs:string.
    std::string*                         in3                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in4" of XSD type xs:string.
    std::string*                         in4                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":blakeTestExchangeData1Response
/// @brief "http://xfire.zxw":blakeTestExchangeData1Response is a complexType.
///
/// class _ns1__blakeTestExchangeData1Response operations:
/// - _ns1__blakeTestExchangeData1Response* soap_new__ns1__blakeTestExchangeData1Response(soap*) allocate
/// - _ns1__blakeTestExchangeData1Response* soap_new__ns1__blakeTestExchangeData1Response(soap*, int num) allocate array
/// - _ns1__blakeTestExchangeData1Response* soap_new_req__ns1__blakeTestExchangeData1Response(soap*, ...) allocate, set required members
/// - _ns1__blakeTestExchangeData1Response* soap_new_set__ns1__blakeTestExchangeData1Response(soap*, ...) allocate, set all public members
/// - _ns1__blakeTestExchangeData1Response::soap_default(soap*) reset members to default
/// - int soap_read__ns1__blakeTestExchangeData1Response(soap*, _ns1__blakeTestExchangeData1Response*) deserialize from a stream
/// - int soap_write__ns1__blakeTestExchangeData1Response(soap*, _ns1__blakeTestExchangeData1Response*) serialize to a stream
/// - _ns1__blakeTestExchangeData1Response* _ns1__blakeTestExchangeData1Response::soap_dup(soap*) returns deep copy of _ns1__blakeTestExchangeData1Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__blakeTestExchangeData1Response::soap_del() deep deletes _ns1__blakeTestExchangeData1Response data members, use only after _ns1__blakeTestExchangeData1Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__blakeTestExchangeData1Response
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":InsertTimeControl
/// @brief "http://xfire.zxw":InsertTimeControl is a complexType.
///
/// class _ns1__InsertTimeControl operations:
/// - _ns1__InsertTimeControl* soap_new__ns1__InsertTimeControl(soap*) allocate
/// - _ns1__InsertTimeControl* soap_new__ns1__InsertTimeControl(soap*, int num) allocate array
/// - _ns1__InsertTimeControl* soap_new_req__ns1__InsertTimeControl(soap*, ...) allocate, set required members
/// - _ns1__InsertTimeControl* soap_new_set__ns1__InsertTimeControl(soap*, ...) allocate, set all public members
/// - _ns1__InsertTimeControl::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InsertTimeControl(soap*, _ns1__InsertTimeControl*) deserialize from a stream
/// - int soap_write__ns1__InsertTimeControl(soap*, _ns1__InsertTimeControl*) serialize to a stream
/// - _ns1__InsertTimeControl* _ns1__InsertTimeControl::soap_dup(soap*) returns deep copy of _ns1__InsertTimeControl, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InsertTimeControl::soap_del() deep deletes _ns1__InsertTimeControl data members, use only after _ns1__InsertTimeControl::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InsertTimeControl
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in3" of XSD type xs:string.
    std::string*                         in3                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in4" of XSD type xs:string.
    std::string*                         in4                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in5" of XSD type xs:string.
    std::string*                         in5                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":InsertTimeControlResponse
/// @brief "http://xfire.zxw":InsertTimeControlResponse is a complexType.
///
/// class _ns1__InsertTimeControlResponse operations:
/// - _ns1__InsertTimeControlResponse* soap_new__ns1__InsertTimeControlResponse(soap*) allocate
/// - _ns1__InsertTimeControlResponse* soap_new__ns1__InsertTimeControlResponse(soap*, int num) allocate array
/// - _ns1__InsertTimeControlResponse* soap_new_req__ns1__InsertTimeControlResponse(soap*, ...) allocate, set required members
/// - _ns1__InsertTimeControlResponse* soap_new_set__ns1__InsertTimeControlResponse(soap*, ...) allocate, set all public members
/// - _ns1__InsertTimeControlResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__InsertTimeControlResponse(soap*, _ns1__InsertTimeControlResponse*) deserialize from a stream
/// - int soap_write__ns1__InsertTimeControlResponse(soap*, _ns1__InsertTimeControlResponse*) serialize to a stream
/// - _ns1__InsertTimeControlResponse* _ns1__InsertTimeControlResponse::soap_dup(soap*) returns deep copy of _ns1__InsertTimeControlResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__InsertTimeControlResponse::soap_del() deep deletes _ns1__InsertTimeControlResponse data members, use only after _ns1__InsertTimeControlResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__InsertTimeControlResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkMac
/// @brief "http://xfire.zxw":checkMac is a complexType.
///
/// class _ns1__checkMac operations:
/// - _ns1__checkMac* soap_new__ns1__checkMac(soap*) allocate
/// - _ns1__checkMac* soap_new__ns1__checkMac(soap*, int num) allocate array
/// - _ns1__checkMac* soap_new_req__ns1__checkMac(soap*, ...) allocate, set required members
/// - _ns1__checkMac* soap_new_set__ns1__checkMac(soap*, ...) allocate, set all public members
/// - _ns1__checkMac::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkMac(soap*, _ns1__checkMac*) deserialize from a stream
/// - int soap_write__ns1__checkMac(soap*, _ns1__checkMac*) serialize to a stream
/// - _ns1__checkMac* _ns1__checkMac::soap_dup(soap*) returns deep copy of _ns1__checkMac, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkMac::soap_del() deep deletes _ns1__checkMac data members, use only after _ns1__checkMac::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkMac
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkMacResponse
/// @brief "http://xfire.zxw":checkMacResponse is a complexType.
///
/// class _ns1__checkMacResponse operations:
/// - _ns1__checkMacResponse* soap_new__ns1__checkMacResponse(soap*) allocate
/// - _ns1__checkMacResponse* soap_new__ns1__checkMacResponse(soap*, int num) allocate array
/// - _ns1__checkMacResponse* soap_new_req__ns1__checkMacResponse(soap*, ...) allocate, set required members
/// - _ns1__checkMacResponse* soap_new_set__ns1__checkMacResponse(soap*, ...) allocate, set all public members
/// - _ns1__checkMacResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkMacResponse(soap*, _ns1__checkMacResponse*) deserialize from a stream
/// - int soap_write__ns1__checkMacResponse(soap*, _ns1__checkMacResponse*) serialize to a stream
/// - _ns1__checkMacResponse* _ns1__checkMacResponse::soap_dup(soap*) returns deep copy of _ns1__checkMacResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkMacResponse::soap_del() deep deletes _ns1__checkMacResponse data members, use only after _ns1__checkMacResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkMacResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":getMaintanceParm
/// @brief "http://xfire.zxw":getMaintanceParm is a complexType.
///
/// class _ns1__getMaintanceParm operations:
/// - _ns1__getMaintanceParm* soap_new__ns1__getMaintanceParm(soap*) allocate
/// - _ns1__getMaintanceParm* soap_new__ns1__getMaintanceParm(soap*, int num) allocate array
/// - _ns1__getMaintanceParm* soap_new_req__ns1__getMaintanceParm(soap*, ...) allocate, set required members
/// - _ns1__getMaintanceParm* soap_new_set__ns1__getMaintanceParm(soap*, ...) allocate, set all public members
/// - _ns1__getMaintanceParm::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getMaintanceParm(soap*, _ns1__getMaintanceParm*) deserialize from a stream
/// - int soap_write__ns1__getMaintanceParm(soap*, _ns1__getMaintanceParm*) serialize to a stream
/// - _ns1__getMaintanceParm* _ns1__getMaintanceParm::soap_dup(soap*) returns deep copy of _ns1__getMaintanceParm, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getMaintanceParm::soap_del() deep deletes _ns1__getMaintanceParm data members, use only after _ns1__getMaintanceParm::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getMaintanceParm
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":getMaintanceParmResponse
/// @brief "http://xfire.zxw":getMaintanceParmResponse is a complexType.
///
/// class _ns1__getMaintanceParmResponse operations:
/// - _ns1__getMaintanceParmResponse* soap_new__ns1__getMaintanceParmResponse(soap*) allocate
/// - _ns1__getMaintanceParmResponse* soap_new__ns1__getMaintanceParmResponse(soap*, int num) allocate array
/// - _ns1__getMaintanceParmResponse* soap_new_req__ns1__getMaintanceParmResponse(soap*, ...) allocate, set required members
/// - _ns1__getMaintanceParmResponse* soap_new_set__ns1__getMaintanceParmResponse(soap*, ...) allocate, set all public members
/// - _ns1__getMaintanceParmResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__getMaintanceParmResponse(soap*, _ns1__getMaintanceParmResponse*) deserialize from a stream
/// - int soap_write__ns1__getMaintanceParmResponse(soap*, _ns1__getMaintanceParmResponse*) serialize to a stream
/// - _ns1__getMaintanceParmResponse* _ns1__getMaintanceParmResponse::soap_dup(soap*) returns deep copy of _ns1__getMaintanceParmResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__getMaintanceParmResponse::soap_del() deep deletes _ns1__getMaintanceParmResponse data members, use only after _ns1__getMaintanceParmResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__getMaintanceParmResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":fetchSnCurrentLocation
/// @brief "http://xfire.zxw":fetchSnCurrentLocation is a complexType.
///
/// class _ns1__fetchSnCurrentLocation operations:
/// - _ns1__fetchSnCurrentLocation* soap_new__ns1__fetchSnCurrentLocation(soap*) allocate
/// - _ns1__fetchSnCurrentLocation* soap_new__ns1__fetchSnCurrentLocation(soap*, int num) allocate array
/// - _ns1__fetchSnCurrentLocation* soap_new_req__ns1__fetchSnCurrentLocation(soap*, ...) allocate, set required members
/// - _ns1__fetchSnCurrentLocation* soap_new_set__ns1__fetchSnCurrentLocation(soap*, ...) allocate, set all public members
/// - _ns1__fetchSnCurrentLocation::soap_default(soap*) reset members to default
/// - int soap_read__ns1__fetchSnCurrentLocation(soap*, _ns1__fetchSnCurrentLocation*) deserialize from a stream
/// - int soap_write__ns1__fetchSnCurrentLocation(soap*, _ns1__fetchSnCurrentLocation*) serialize to a stream
/// - _ns1__fetchSnCurrentLocation* _ns1__fetchSnCurrentLocation::soap_dup(soap*) returns deep copy of _ns1__fetchSnCurrentLocation, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__fetchSnCurrentLocation::soap_del() deep deletes _ns1__fetchSnCurrentLocation data members, use only after _ns1__fetchSnCurrentLocation::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__fetchSnCurrentLocation
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":fetchSnCurrentLocationResponse
/// @brief "http://xfire.zxw":fetchSnCurrentLocationResponse is a complexType.
///
/// class _ns1__fetchSnCurrentLocationResponse operations:
/// - _ns1__fetchSnCurrentLocationResponse* soap_new__ns1__fetchSnCurrentLocationResponse(soap*) allocate
/// - _ns1__fetchSnCurrentLocationResponse* soap_new__ns1__fetchSnCurrentLocationResponse(soap*, int num) allocate array
/// - _ns1__fetchSnCurrentLocationResponse* soap_new_req__ns1__fetchSnCurrentLocationResponse(soap*, ...) allocate, set required members
/// - _ns1__fetchSnCurrentLocationResponse* soap_new_set__ns1__fetchSnCurrentLocationResponse(soap*, ...) allocate, set all public members
/// - _ns1__fetchSnCurrentLocationResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__fetchSnCurrentLocationResponse(soap*, _ns1__fetchSnCurrentLocationResponse*) deserialize from a stream
/// - int soap_write__ns1__fetchSnCurrentLocationResponse(soap*, _ns1__fetchSnCurrentLocationResponse*) serialize to a stream
/// - _ns1__fetchSnCurrentLocationResponse* _ns1__fetchSnCurrentLocationResponse::soap_dup(soap*) returns deep copy of _ns1__fetchSnCurrentLocationResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__fetchSnCurrentLocationResponse::soap_del() deep deletes _ns1__fetchSnCurrentLocationResponse data members, use only after _ns1__fetchSnCurrentLocationResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__fetchSnCurrentLocationResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":goNewRouteseq
/// @brief "http://xfire.zxw":goNewRouteseq is a complexType.
///
/// class _ns1__goNewRouteseq operations:
/// - _ns1__goNewRouteseq* soap_new__ns1__goNewRouteseq(soap*) allocate
/// - _ns1__goNewRouteseq* soap_new__ns1__goNewRouteseq(soap*, int num) allocate array
/// - _ns1__goNewRouteseq* soap_new_req__ns1__goNewRouteseq(soap*, ...) allocate, set required members
/// - _ns1__goNewRouteseq* soap_new_set__ns1__goNewRouteseq(soap*, ...) allocate, set all public members
/// - _ns1__goNewRouteseq::soap_default(soap*) reset members to default
/// - int soap_read__ns1__goNewRouteseq(soap*, _ns1__goNewRouteseq*) deserialize from a stream
/// - int soap_write__ns1__goNewRouteseq(soap*, _ns1__goNewRouteseq*) serialize to a stream
/// - _ns1__goNewRouteseq* _ns1__goNewRouteseq::soap_dup(soap*) returns deep copy of _ns1__goNewRouteseq, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__goNewRouteseq::soap_del() deep deletes _ns1__goNewRouteseq data members, use only after _ns1__goNewRouteseq::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__goNewRouteseq
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":goNewRouteseqResponse
/// @brief "http://xfire.zxw":goNewRouteseqResponse is a complexType.
///
/// class _ns1__goNewRouteseqResponse operations:
/// - _ns1__goNewRouteseqResponse* soap_new__ns1__goNewRouteseqResponse(soap*) allocate
/// - _ns1__goNewRouteseqResponse* soap_new__ns1__goNewRouteseqResponse(soap*, int num) allocate array
/// - _ns1__goNewRouteseqResponse* soap_new_req__ns1__goNewRouteseqResponse(soap*, ...) allocate, set required members
/// - _ns1__goNewRouteseqResponse* soap_new_set__ns1__goNewRouteseqResponse(soap*, ...) allocate, set all public members
/// - _ns1__goNewRouteseqResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__goNewRouteseqResponse(soap*, _ns1__goNewRouteseqResponse*) deserialize from a stream
/// - int soap_write__ns1__goNewRouteseqResponse(soap*, _ns1__goNewRouteseqResponse*) serialize to a stream
/// - _ns1__goNewRouteseqResponse* _ns1__goNewRouteseqResponse::soap_dup(soap*) returns deep copy of _ns1__goNewRouteseqResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__goNewRouteseqResponse::soap_del() deep deletes _ns1__goNewRouteseqResponse data members, use only after _ns1__goNewRouteseqResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__goNewRouteseqResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":blakeTestExchangeData
/// @brief "http://xfire.zxw":blakeTestExchangeData is a complexType.
///
/// class _ns1__blakeTestExchangeData operations:
/// - _ns1__blakeTestExchangeData* soap_new__ns1__blakeTestExchangeData(soap*) allocate
/// - _ns1__blakeTestExchangeData* soap_new__ns1__blakeTestExchangeData(soap*, int num) allocate array
/// - _ns1__blakeTestExchangeData* soap_new_req__ns1__blakeTestExchangeData(soap*, ...) allocate, set required members
/// - _ns1__blakeTestExchangeData* soap_new_set__ns1__blakeTestExchangeData(soap*, ...) allocate, set all public members
/// - _ns1__blakeTestExchangeData::soap_default(soap*) reset members to default
/// - int soap_read__ns1__blakeTestExchangeData(soap*, _ns1__blakeTestExchangeData*) deserialize from a stream
/// - int soap_write__ns1__blakeTestExchangeData(soap*, _ns1__blakeTestExchangeData*) serialize to a stream
/// - _ns1__blakeTestExchangeData* _ns1__blakeTestExchangeData::soap_dup(soap*) returns deep copy of _ns1__blakeTestExchangeData, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__blakeTestExchangeData::soap_del() deep deletes _ns1__blakeTestExchangeData data members, use only after _ns1__blakeTestExchangeData::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__blakeTestExchangeData
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in1" of XSD type xs:string.
    std::string*                         in1                            1;	///< Optional (xsi:nil when NULL) element.
/// Element "in2" of XSD type xs:string.
    std::string*                         in2                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":blakeTestExchangeDataResponse
/// @brief "http://xfire.zxw":blakeTestExchangeDataResponse is a complexType.
///
/// class _ns1__blakeTestExchangeDataResponse operations:
/// - _ns1__blakeTestExchangeDataResponse* soap_new__ns1__blakeTestExchangeDataResponse(soap*) allocate
/// - _ns1__blakeTestExchangeDataResponse* soap_new__ns1__blakeTestExchangeDataResponse(soap*, int num) allocate array
/// - _ns1__blakeTestExchangeDataResponse* soap_new_req__ns1__blakeTestExchangeDataResponse(soap*, ...) allocate, set required members
/// - _ns1__blakeTestExchangeDataResponse* soap_new_set__ns1__blakeTestExchangeDataResponse(soap*, ...) allocate, set all public members
/// - _ns1__blakeTestExchangeDataResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__blakeTestExchangeDataResponse(soap*, _ns1__blakeTestExchangeDataResponse*) deserialize from a stream
/// - int soap_write__ns1__blakeTestExchangeDataResponse(soap*, _ns1__blakeTestExchangeDataResponse*) serialize to a stream
/// - _ns1__blakeTestExchangeDataResponse* _ns1__blakeTestExchangeDataResponse::soap_dup(soap*) returns deep copy of _ns1__blakeTestExchangeDataResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__blakeTestExchangeDataResponse::soap_del() deep deletes _ns1__blakeTestExchangeDataResponse data members, use only after _ns1__blakeTestExchangeDataResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__blakeTestExchangeDataResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkingSNNextRoute
/// @brief "http://xfire.zxw":checkingSNNextRoute is a complexType.
///
/// class _ns1__checkingSNNextRoute operations:
/// - _ns1__checkingSNNextRoute* soap_new__ns1__checkingSNNextRoute(soap*) allocate
/// - _ns1__checkingSNNextRoute* soap_new__ns1__checkingSNNextRoute(soap*, int num) allocate array
/// - _ns1__checkingSNNextRoute* soap_new_req__ns1__checkingSNNextRoute(soap*, ...) allocate, set required members
/// - _ns1__checkingSNNextRoute* soap_new_set__ns1__checkingSNNextRoute(soap*, ...) allocate, set all public members
/// - _ns1__checkingSNNextRoute::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkingSNNextRoute(soap*, _ns1__checkingSNNextRoute*) deserialize from a stream
/// - int soap_write__ns1__checkingSNNextRoute(soap*, _ns1__checkingSNNextRoute*) serialize to a stream
/// - _ns1__checkingSNNextRoute* _ns1__checkingSNNextRoute::soap_dup(soap*) returns deep copy of _ns1__checkingSNNextRoute, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkingSNNextRoute::soap_del() deep deletes _ns1__checkingSNNextRoute data members, use only after _ns1__checkingSNNextRoute::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkingSNNextRoute
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":checkingSNNextRouteResponse
/// @brief "http://xfire.zxw":checkingSNNextRouteResponse is a complexType.
///
/// class _ns1__checkingSNNextRouteResponse operations:
/// - _ns1__checkingSNNextRouteResponse* soap_new__ns1__checkingSNNextRouteResponse(soap*) allocate
/// - _ns1__checkingSNNextRouteResponse* soap_new__ns1__checkingSNNextRouteResponse(soap*, int num) allocate array
/// - _ns1__checkingSNNextRouteResponse* soap_new_req__ns1__checkingSNNextRouteResponse(soap*, ...) allocate, set required members
/// - _ns1__checkingSNNextRouteResponse* soap_new_set__ns1__checkingSNNextRouteResponse(soap*, ...) allocate, set all public members
/// - _ns1__checkingSNNextRouteResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__checkingSNNextRouteResponse(soap*, _ns1__checkingSNNextRouteResponse*) deserialize from a stream
/// - int soap_write__ns1__checkingSNNextRouteResponse(soap*, _ns1__checkingSNNextRouteResponse*) serialize to a stream
/// - _ns1__checkingSNNextRouteResponse* _ns1__checkingSNNextRouteResponse::soap_dup(soap*) returns deep copy of _ns1__checkingSNNextRouteResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__checkingSNNextRouteResponse::soap_del() deep deletes _ns1__checkingSNNextRouteResponse data members, use only after _ns1__checkingSNNextRouteResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__checkingSNNextRouteResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":Ispasspostburnin
/// @brief "http://xfire.zxw":Ispasspostburnin is a complexType.
///
/// class _ns1__Ispasspostburnin operations:
/// - _ns1__Ispasspostburnin* soap_new__ns1__Ispasspostburnin(soap*) allocate
/// - _ns1__Ispasspostburnin* soap_new__ns1__Ispasspostburnin(soap*, int num) allocate array
/// - _ns1__Ispasspostburnin* soap_new_req__ns1__Ispasspostburnin(soap*, ...) allocate, set required members
/// - _ns1__Ispasspostburnin* soap_new_set__ns1__Ispasspostburnin(soap*, ...) allocate, set all public members
/// - _ns1__Ispasspostburnin::soap_default(soap*) reset members to default
/// - int soap_read__ns1__Ispasspostburnin(soap*, _ns1__Ispasspostburnin*) deserialize from a stream
/// - int soap_write__ns1__Ispasspostburnin(soap*, _ns1__Ispasspostburnin*) serialize to a stream
/// - _ns1__Ispasspostburnin* _ns1__Ispasspostburnin::soap_dup(soap*) returns deep copy of _ns1__Ispasspostburnin, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Ispasspostburnin::soap_del() deep deletes _ns1__Ispasspostburnin data members, use only after _ns1__Ispasspostburnin::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Ispasspostburnin
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":IspasspostburninResponse
/// @brief "http://xfire.zxw":IspasspostburninResponse is a complexType.
///
/// class _ns1__IspasspostburninResponse operations:
/// - _ns1__IspasspostburninResponse* soap_new__ns1__IspasspostburninResponse(soap*) allocate
/// - _ns1__IspasspostburninResponse* soap_new__ns1__IspasspostburninResponse(soap*, int num) allocate array
/// - _ns1__IspasspostburninResponse* soap_new_req__ns1__IspasspostburninResponse(soap*, ...) allocate, set required members
/// - _ns1__IspasspostburninResponse* soap_new_set__ns1__IspasspostburninResponse(soap*, ...) allocate, set all public members
/// - _ns1__IspasspostburninResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__IspasspostburninResponse(soap*, _ns1__IspasspostburninResponse*) deserialize from a stream
/// - int soap_write__ns1__IspasspostburninResponse(soap*, _ns1__IspasspostburninResponse*) serialize to a stream
/// - _ns1__IspasspostburninResponse* _ns1__IspasspostburninResponse::soap_dup(soap*) returns deep copy of _ns1__IspasspostburninResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__IspasspostburninResponse::soap_del() deep deletes _ns1__IspasspostburninResponse data members, use only after _ns1__IspasspostburninResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__IspasspostburninResponse
{ public:
/// Element "out" of XSD type xs:int.
    int                                  out                            1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":CheckTimeGap
/// @brief "http://xfire.zxw":CheckTimeGap is a complexType.
///
/// class _ns1__CheckTimeGap operations:
/// - _ns1__CheckTimeGap* soap_new__ns1__CheckTimeGap(soap*) allocate
/// - _ns1__CheckTimeGap* soap_new__ns1__CheckTimeGap(soap*, int num) allocate array
/// - _ns1__CheckTimeGap* soap_new_req__ns1__CheckTimeGap(soap*, ...) allocate, set required members
/// - _ns1__CheckTimeGap* soap_new_set__ns1__CheckTimeGap(soap*, ...) allocate, set all public members
/// - _ns1__CheckTimeGap::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CheckTimeGap(soap*, _ns1__CheckTimeGap*) deserialize from a stream
/// - int soap_write__ns1__CheckTimeGap(soap*, _ns1__CheckTimeGap*) serialize to a stream
/// - _ns1__CheckTimeGap* _ns1__CheckTimeGap::soap_dup(soap*) returns deep copy of _ns1__CheckTimeGap, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckTimeGap::soap_del() deep deletes _ns1__CheckTimeGap data members, use only after _ns1__CheckTimeGap::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckTimeGap
{ public:
/// Element "in0" of XSD type xs:string.
    std::string*                         in0                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://xfire.zxw":CheckTimeGapResponse
/// @brief "http://xfire.zxw":CheckTimeGapResponse is a complexType.
///
/// class _ns1__CheckTimeGapResponse operations:
/// - _ns1__CheckTimeGapResponse* soap_new__ns1__CheckTimeGapResponse(soap*) allocate
/// - _ns1__CheckTimeGapResponse* soap_new__ns1__CheckTimeGapResponse(soap*, int num) allocate array
/// - _ns1__CheckTimeGapResponse* soap_new_req__ns1__CheckTimeGapResponse(soap*, ...) allocate, set required members
/// - _ns1__CheckTimeGapResponse* soap_new_set__ns1__CheckTimeGapResponse(soap*, ...) allocate, set all public members
/// - _ns1__CheckTimeGapResponse::soap_default(soap*) reset members to default
/// - int soap_read__ns1__CheckTimeGapResponse(soap*, _ns1__CheckTimeGapResponse*) deserialize from a stream
/// - int soap_write__ns1__CheckTimeGapResponse(soap*, _ns1__CheckTimeGapResponse*) serialize to a stream
/// - _ns1__CheckTimeGapResponse* _ns1__CheckTimeGapResponse::soap_dup(soap*) returns deep copy of _ns1__CheckTimeGapResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__CheckTimeGapResponse::soap_del() deep deletes _ns1__CheckTimeGapResponse data members, use only after _ns1__CheckTimeGapResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__CheckTimeGapResponse
{ public:
/// Element "out" of XSD type xs:string.
    std::string*                         out                            1;	///< Optional (xsi:nil when NULL) element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://xfire.zxw                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://xfire.zxw                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	BlakeTestServiceHttpBinding 
//gsoap ns1  service type:	BlakeTestServicePortType 
//gsoap ns1  service port:	http://10.9.38.109:8080/emsmes/services/blaketestws 
//gsoap ns1  service namespace:	http://xfire.zxw 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref BlakeTestServiceHttpBinding

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BlakeTestServiceHttpBinding Binding "BlakeTestServiceHttpBinding"

@section BlakeTestServiceHttpBinding_operations Operations of Binding "BlakeTestServiceHttpBinding"

  - @ref __ns1__SnSaveTechProcess

  - @ref __ns1__bindAssembly

  - @ref __ns1__loadTimeControlData

  - @ref __ns1__loadNgPanelNo

  - @ref __ns1__checkSNOrderNo

  - @ref __ns1__checkSNPangusOrderNo

  - @ref __ns1__SnSaveTechProcess_USCOREA

  - @ref __ns1__staffCheck

  - @ref __ns1__getAssemblyData

  - @ref __ns1__InsertPRateData

  - @ref __ns1__blakeTestExchangeData1

  - @ref __ns1__InsertTimeControl

  - @ref __ns1__checkMac

  - @ref __ns1__getMaintanceParm

  - @ref __ns1__fetchSnCurrentLocation

  - @ref __ns1__goNewRouteseq

  - @ref __ns1__blakeTestExchangeData

  - @ref __ns1__checkingSNNextRoute

  - @ref __ns1__Ispasspostburnin

  - @ref __ns1__CheckTimeGap

@section BlakeTestServiceHttpBinding_ports Endpoints of Binding "BlakeTestServiceHttpBinding"

  - http://10.9.38.109:8080/emsmes/services/blaketestws

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BlakeTestServiceHttpBinding                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SnSaveTechProcess                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SnSaveTechProcess" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SnSaveTechProcess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SnSaveTechProcess*            ns1__SnSaveTechProcess,
    // output parameters:
    _ns1__SnSaveTechProcessResponse    &ns1__SnSaveTechProcessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SnSaveTechProcess(
    struct soap *soap,
    // input parameters:
    _ns1__SnSaveTechProcess*            ns1__SnSaveTechProcess,
    // output parameters:
    _ns1__SnSaveTechProcessResponse    &ns1__SnSaveTechProcessResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SnSaveTechProcess SOAP
//gsoap ns1  service method-style:	SnSaveTechProcess document
//gsoap ns1  service method-encoding:	SnSaveTechProcess literal
//gsoap ns1  service method-action:	SnSaveTechProcess ""
//gsoap ns1  service method-output-action:	SnSaveTechProcess Response
int __ns1__SnSaveTechProcess(
    _ns1__SnSaveTechProcess*            ns1__SnSaveTechProcess,	///< Input parameter
    _ns1__SnSaveTechProcessResponse    &ns1__SnSaveTechProcessResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__bindAssembly                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__bindAssembly" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__bindAssembly(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__bindAssembly*                 ns1__bindAssembly,
    // output parameters:
    _ns1__bindAssemblyResponse         &ns1__bindAssemblyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__bindAssembly(
    struct soap *soap,
    // input parameters:
    _ns1__bindAssembly*                 ns1__bindAssembly,
    // output parameters:
    _ns1__bindAssemblyResponse         &ns1__bindAssemblyResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	bindAssembly SOAP
//gsoap ns1  service method-style:	bindAssembly document
//gsoap ns1  service method-encoding:	bindAssembly literal
//gsoap ns1  service method-action:	bindAssembly ""
//gsoap ns1  service method-output-action:	bindAssembly Response
int __ns1__bindAssembly(
    _ns1__bindAssembly*                 ns1__bindAssembly,	///< Input parameter
    _ns1__bindAssemblyResponse         &ns1__bindAssemblyResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__loadTimeControlData                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__loadTimeControlData" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__loadTimeControlData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__loadTimeControlData*          ns1__loadTimeControlData,
    // output parameters:
    _ns1__loadTimeControlDataResponse  &ns1__loadTimeControlDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__loadTimeControlData(
    struct soap *soap,
    // input parameters:
    _ns1__loadTimeControlData*          ns1__loadTimeControlData,
    // output parameters:
    _ns1__loadTimeControlDataResponse  &ns1__loadTimeControlDataResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	loadTimeControlData SOAP
//gsoap ns1  service method-style:	loadTimeControlData document
//gsoap ns1  service method-encoding:	loadTimeControlData literal
//gsoap ns1  service method-action:	loadTimeControlData ""
//gsoap ns1  service method-output-action:	loadTimeControlData Response
int __ns1__loadTimeControlData(
    _ns1__loadTimeControlData*          ns1__loadTimeControlData,	///< Input parameter
    _ns1__loadTimeControlDataResponse  &ns1__loadTimeControlDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__loadNgPanelNo                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__loadNgPanelNo" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__loadNgPanelNo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__loadNgPanelNo*                ns1__loadNgPanelNo,
    // output parameters:
    _ns1__loadNgPanelNoResponse        &ns1__loadNgPanelNoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__loadNgPanelNo(
    struct soap *soap,
    // input parameters:
    _ns1__loadNgPanelNo*                ns1__loadNgPanelNo,
    // output parameters:
    _ns1__loadNgPanelNoResponse        &ns1__loadNgPanelNoResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	loadNgPanelNo SOAP
//gsoap ns1  service method-style:	loadNgPanelNo document
//gsoap ns1  service method-encoding:	loadNgPanelNo literal
//gsoap ns1  service method-action:	loadNgPanelNo ""
//gsoap ns1  service method-output-action:	loadNgPanelNo Response
int __ns1__loadNgPanelNo(
    _ns1__loadNgPanelNo*                ns1__loadNgPanelNo,	///< Input parameter
    _ns1__loadNgPanelNoResponse        &ns1__loadNgPanelNoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkSNOrderNo                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__checkSNOrderNo" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkSNOrderNo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__checkSNOrderNo*               ns1__checkSNOrderNo,
    // output parameters:
    _ns1__checkSNOrderNoResponse       &ns1__checkSNOrderNoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkSNOrderNo(
    struct soap *soap,
    // input parameters:
    _ns1__checkSNOrderNo*               ns1__checkSNOrderNo,
    // output parameters:
    _ns1__checkSNOrderNoResponse       &ns1__checkSNOrderNoResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	checkSNOrderNo SOAP
//gsoap ns1  service method-style:	checkSNOrderNo document
//gsoap ns1  service method-encoding:	checkSNOrderNo literal
//gsoap ns1  service method-action:	checkSNOrderNo ""
//gsoap ns1  service method-output-action:	checkSNOrderNo Response
int __ns1__checkSNOrderNo(
    _ns1__checkSNOrderNo*               ns1__checkSNOrderNo,	///< Input parameter
    _ns1__checkSNOrderNoResponse       &ns1__checkSNOrderNoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkSNPangusOrderNo                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__checkSNPangusOrderNo" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkSNPangusOrderNo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__checkSNPangusOrderNo*         ns1__checkSNPangusOrderNo,
    // output parameters:
    _ns1__checkSNPangusOrderNoResponse &ns1__checkSNPangusOrderNoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkSNPangusOrderNo(
    struct soap *soap,
    // input parameters:
    _ns1__checkSNPangusOrderNo*         ns1__checkSNPangusOrderNo,
    // output parameters:
    _ns1__checkSNPangusOrderNoResponse &ns1__checkSNPangusOrderNoResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	checkSNPangusOrderNo SOAP
//gsoap ns1  service method-style:	checkSNPangusOrderNo document
//gsoap ns1  service method-encoding:	checkSNPangusOrderNo literal
//gsoap ns1  service method-action:	checkSNPangusOrderNo ""
//gsoap ns1  service method-output-action:	checkSNPangusOrderNo Response
int __ns1__checkSNPangusOrderNo(
    _ns1__checkSNPangusOrderNo*         ns1__checkSNPangusOrderNo,	///< Input parameter
    _ns1__checkSNPangusOrderNoResponse &ns1__checkSNPangusOrderNoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SnSaveTechProcess_USCOREA                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SnSaveTechProcess_USCOREA" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SnSaveTechProcess_USCOREA(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SnSaveTechProcess_USCOREA*    ns1__SnSaveTechProcess_USCOREA,
    // output parameters:
    _ns1__SnSaveTechProcess_USCOREAResponse&ns1__SnSaveTechProcess_USCOREAResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SnSaveTechProcess_USCOREA(
    struct soap *soap,
    // input parameters:
    _ns1__SnSaveTechProcess_USCOREA*    ns1__SnSaveTechProcess_USCOREA,
    // output parameters:
    _ns1__SnSaveTechProcess_USCOREAResponse&ns1__SnSaveTechProcess_USCOREAResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SnSaveTechProcess_USCOREA SOAP
//gsoap ns1  service method-style:	SnSaveTechProcess_USCOREA document
//gsoap ns1  service method-encoding:	SnSaveTechProcess_USCOREA literal
//gsoap ns1  service method-action:	SnSaveTechProcess_USCOREA ""
//gsoap ns1  service method-output-action:	SnSaveTechProcess_USCOREA Response
int __ns1__SnSaveTechProcess_USCOREA(
    _ns1__SnSaveTechProcess_USCOREA*    ns1__SnSaveTechProcess_USCOREA,	///< Input parameter
    _ns1__SnSaveTechProcess_USCOREAResponse&ns1__SnSaveTechProcess_USCOREAResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__staffCheck                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__staffCheck" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__staffCheck(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__staffCheck*                   ns1__staffCheck,
    // output parameters:
    _ns1__staffCheckResponse           &ns1__staffCheckResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__staffCheck(
    struct soap *soap,
    // input parameters:
    _ns1__staffCheck*                   ns1__staffCheck,
    // output parameters:
    _ns1__staffCheckResponse           &ns1__staffCheckResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	staffCheck SOAP
//gsoap ns1  service method-style:	staffCheck document
//gsoap ns1  service method-encoding:	staffCheck literal
//gsoap ns1  service method-action:	staffCheck ""
//gsoap ns1  service method-output-action:	staffCheck Response
int __ns1__staffCheck(
    _ns1__staffCheck*                   ns1__staffCheck,	///< Input parameter
    _ns1__staffCheckResponse           &ns1__staffCheckResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getAssemblyData                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getAssemblyData" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getAssemblyData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getAssemblyData*              ns1__getAssemblyData,
    // output parameters:
    _ns1__getAssemblyDataResponse      &ns1__getAssemblyDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getAssemblyData(
    struct soap *soap,
    // input parameters:
    _ns1__getAssemblyData*              ns1__getAssemblyData,
    // output parameters:
    _ns1__getAssemblyDataResponse      &ns1__getAssemblyDataResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getAssemblyData SOAP
//gsoap ns1  service method-style:	getAssemblyData document
//gsoap ns1  service method-encoding:	getAssemblyData literal
//gsoap ns1  service method-action:	getAssemblyData ""
//gsoap ns1  service method-output-action:	getAssemblyData Response
int __ns1__getAssemblyData(
    _ns1__getAssemblyData*              ns1__getAssemblyData,	///< Input parameter
    _ns1__getAssemblyDataResponse      &ns1__getAssemblyDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InsertPRateData                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InsertPRateData" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InsertPRateData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__InsertPRateData*              ns1__InsertPRateData,
    // output parameters:
    _ns1__InsertPRateDataResponse      &ns1__InsertPRateDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InsertPRateData(
    struct soap *soap,
    // input parameters:
    _ns1__InsertPRateData*              ns1__InsertPRateData,
    // output parameters:
    _ns1__InsertPRateDataResponse      &ns1__InsertPRateDataResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertPRateData SOAP
//gsoap ns1  service method-style:	InsertPRateData document
//gsoap ns1  service method-encoding:	InsertPRateData literal
//gsoap ns1  service method-action:	InsertPRateData ""
//gsoap ns1  service method-output-action:	InsertPRateData Response
int __ns1__InsertPRateData(
    _ns1__InsertPRateData*              ns1__InsertPRateData,	///< Input parameter
    _ns1__InsertPRateDataResponse      &ns1__InsertPRateDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__blakeTestExchangeData1                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__blakeTestExchangeData1" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__blakeTestExchangeData1(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__blakeTestExchangeData1*       ns1__blakeTestExchangeData1,
    // output parameters:
    _ns1__blakeTestExchangeData1Response&ns1__blakeTestExchangeData1Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__blakeTestExchangeData1(
    struct soap *soap,
    // input parameters:
    _ns1__blakeTestExchangeData1*       ns1__blakeTestExchangeData1,
    // output parameters:
    _ns1__blakeTestExchangeData1Response&ns1__blakeTestExchangeData1Response
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	blakeTestExchangeData1 SOAP
//gsoap ns1  service method-style:	blakeTestExchangeData1 document
//gsoap ns1  service method-encoding:	blakeTestExchangeData1 literal
//gsoap ns1  service method-action:	blakeTestExchangeData1 ""
//gsoap ns1  service method-output-action:	blakeTestExchangeData1 Response
int __ns1__blakeTestExchangeData1(
    _ns1__blakeTestExchangeData1*       ns1__blakeTestExchangeData1,	///< Input parameter
    _ns1__blakeTestExchangeData1Response&ns1__blakeTestExchangeData1Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__InsertTimeControl                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__InsertTimeControl" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__InsertTimeControl(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__InsertTimeControl*            ns1__InsertTimeControl,
    // output parameters:
    _ns1__InsertTimeControlResponse    &ns1__InsertTimeControlResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__InsertTimeControl(
    struct soap *soap,
    // input parameters:
    _ns1__InsertTimeControl*            ns1__InsertTimeControl,
    // output parameters:
    _ns1__InsertTimeControlResponse    &ns1__InsertTimeControlResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	InsertTimeControl SOAP
//gsoap ns1  service method-style:	InsertTimeControl document
//gsoap ns1  service method-encoding:	InsertTimeControl literal
//gsoap ns1  service method-action:	InsertTimeControl ""
//gsoap ns1  service method-output-action:	InsertTimeControl Response
int __ns1__InsertTimeControl(
    _ns1__InsertTimeControl*            ns1__InsertTimeControl,	///< Input parameter
    _ns1__InsertTimeControlResponse    &ns1__InsertTimeControlResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkMac                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__checkMac" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkMac(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__checkMac*                     ns1__checkMac,
    // output parameters:
    _ns1__checkMacResponse             &ns1__checkMacResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkMac(
    struct soap *soap,
    // input parameters:
    _ns1__checkMac*                     ns1__checkMac,
    // output parameters:
    _ns1__checkMacResponse             &ns1__checkMacResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	checkMac SOAP
//gsoap ns1  service method-style:	checkMac document
//gsoap ns1  service method-encoding:	checkMac literal
//gsoap ns1  service method-action:	checkMac ""
//gsoap ns1  service method-output-action:	checkMac Response
int __ns1__checkMac(
    _ns1__checkMac*                     ns1__checkMac,	///< Input parameter
    _ns1__checkMacResponse             &ns1__checkMacResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__getMaintanceParm                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__getMaintanceParm" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__getMaintanceParm(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__getMaintanceParm*             ns1__getMaintanceParm,
    // output parameters:
    _ns1__getMaintanceParmResponse     &ns1__getMaintanceParmResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__getMaintanceParm(
    struct soap *soap,
    // input parameters:
    _ns1__getMaintanceParm*             ns1__getMaintanceParm,
    // output parameters:
    _ns1__getMaintanceParmResponse     &ns1__getMaintanceParmResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	getMaintanceParm SOAP
//gsoap ns1  service method-style:	getMaintanceParm document
//gsoap ns1  service method-encoding:	getMaintanceParm literal
//gsoap ns1  service method-action:	getMaintanceParm ""
//gsoap ns1  service method-output-action:	getMaintanceParm Response
int __ns1__getMaintanceParm(
    _ns1__getMaintanceParm*             ns1__getMaintanceParm,	///< Input parameter
    _ns1__getMaintanceParmResponse     &ns1__getMaintanceParmResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__fetchSnCurrentLocation                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__fetchSnCurrentLocation" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__fetchSnCurrentLocation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__fetchSnCurrentLocation*       ns1__fetchSnCurrentLocation,
    // output parameters:
    _ns1__fetchSnCurrentLocationResponse&ns1__fetchSnCurrentLocationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__fetchSnCurrentLocation(
    struct soap *soap,
    // input parameters:
    _ns1__fetchSnCurrentLocation*       ns1__fetchSnCurrentLocation,
    // output parameters:
    _ns1__fetchSnCurrentLocationResponse&ns1__fetchSnCurrentLocationResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	fetchSnCurrentLocation SOAP
//gsoap ns1  service method-style:	fetchSnCurrentLocation document
//gsoap ns1  service method-encoding:	fetchSnCurrentLocation literal
//gsoap ns1  service method-action:	fetchSnCurrentLocation ""
//gsoap ns1  service method-output-action:	fetchSnCurrentLocation Response
int __ns1__fetchSnCurrentLocation(
    _ns1__fetchSnCurrentLocation*       ns1__fetchSnCurrentLocation,	///< Input parameter
    _ns1__fetchSnCurrentLocationResponse&ns1__fetchSnCurrentLocationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__goNewRouteseq                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__goNewRouteseq" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__goNewRouteseq(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__goNewRouteseq*                ns1__goNewRouteseq,
    // output parameters:
    _ns1__goNewRouteseqResponse        &ns1__goNewRouteseqResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__goNewRouteseq(
    struct soap *soap,
    // input parameters:
    _ns1__goNewRouteseq*                ns1__goNewRouteseq,
    // output parameters:
    _ns1__goNewRouteseqResponse        &ns1__goNewRouteseqResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	goNewRouteseq SOAP
//gsoap ns1  service method-style:	goNewRouteseq document
//gsoap ns1  service method-encoding:	goNewRouteseq literal
//gsoap ns1  service method-action:	goNewRouteseq ""
//gsoap ns1  service method-output-action:	goNewRouteseq Response
int __ns1__goNewRouteseq(
    _ns1__goNewRouteseq*                ns1__goNewRouteseq,	///< Input parameter
    _ns1__goNewRouteseqResponse        &ns1__goNewRouteseqResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__blakeTestExchangeData                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__blakeTestExchangeData" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__blakeTestExchangeData(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__blakeTestExchangeData*        ns1__blakeTestExchangeData,
    // output parameters:
    _ns1__blakeTestExchangeDataResponse&ns1__blakeTestExchangeDataResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__blakeTestExchangeData(
    struct soap *soap,
    // input parameters:
    _ns1__blakeTestExchangeData*        ns1__blakeTestExchangeData,
    // output parameters:
    _ns1__blakeTestExchangeDataResponse&ns1__blakeTestExchangeDataResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	blakeTestExchangeData SOAP
//gsoap ns1  service method-style:	blakeTestExchangeData document
//gsoap ns1  service method-encoding:	blakeTestExchangeData literal
//gsoap ns1  service method-action:	blakeTestExchangeData ""
//gsoap ns1  service method-output-action:	blakeTestExchangeData Response
int __ns1__blakeTestExchangeData(
    _ns1__blakeTestExchangeData*        ns1__blakeTestExchangeData,	///< Input parameter
    _ns1__blakeTestExchangeDataResponse&ns1__blakeTestExchangeDataResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__checkingSNNextRoute                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__checkingSNNextRoute" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__checkingSNNextRoute(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__checkingSNNextRoute*          ns1__checkingSNNextRoute,
    // output parameters:
    _ns1__checkingSNNextRouteResponse  &ns1__checkingSNNextRouteResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__checkingSNNextRoute(
    struct soap *soap,
    // input parameters:
    _ns1__checkingSNNextRoute*          ns1__checkingSNNextRoute,
    // output parameters:
    _ns1__checkingSNNextRouteResponse  &ns1__checkingSNNextRouteResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	checkingSNNextRoute SOAP
//gsoap ns1  service method-style:	checkingSNNextRoute document
//gsoap ns1  service method-encoding:	checkingSNNextRoute literal
//gsoap ns1  service method-action:	checkingSNNextRoute ""
//gsoap ns1  service method-output-action:	checkingSNNextRoute Response
int __ns1__checkingSNNextRoute(
    _ns1__checkingSNNextRoute*          ns1__checkingSNNextRoute,	///< Input parameter
    _ns1__checkingSNNextRouteResponse  &ns1__checkingSNNextRouteResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Ispasspostburnin                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Ispasspostburnin" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Ispasspostburnin(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Ispasspostburnin*             ns1__Ispasspostburnin,
    // output parameters:
    _ns1__IspasspostburninResponse     &ns1__IspasspostburninResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Ispasspostburnin(
    struct soap *soap,
    // input parameters:
    _ns1__Ispasspostburnin*             ns1__Ispasspostburnin,
    // output parameters:
    _ns1__IspasspostburninResponse     &ns1__IspasspostburninResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Ispasspostburnin SOAP
//gsoap ns1  service method-style:	Ispasspostburnin document
//gsoap ns1  service method-encoding:	Ispasspostburnin literal
//gsoap ns1  service method-action:	Ispasspostburnin ""
//gsoap ns1  service method-output-action:	Ispasspostburnin Response
int __ns1__Ispasspostburnin(
    _ns1__Ispasspostburnin*             ns1__Ispasspostburnin,	///< Input parameter
    _ns1__IspasspostburninResponse     &ns1__IspasspostburninResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CheckTimeGap                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__CheckTimeGap" of service binding "BlakeTestServiceHttpBinding".

  - SOAP document/literal style messaging

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CheckTimeGap(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__CheckTimeGap*                 ns1__CheckTimeGap,
    // output parameters:
    _ns1__CheckTimeGapResponse         &ns1__CheckTimeGapResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CheckTimeGap(
    struct soap *soap,
    // input parameters:
    _ns1__CheckTimeGap*                 ns1__CheckTimeGap,
    // output parameters:
    _ns1__CheckTimeGapResponse         &ns1__CheckTimeGapResponse
  );
@endcode

C++ proxy class (defined in soapBlakeTestServiceHttpBindingProxy.h):
@code
  class BlakeTestServiceHttpBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapBlakeTestServiceHttpBindingService.h):
@code
  class BlakeTestServiceHttpBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	CheckTimeGap SOAP
//gsoap ns1  service method-style:	CheckTimeGap document
//gsoap ns1  service method-encoding:	CheckTimeGap literal
//gsoap ns1  service method-action:	CheckTimeGap ""
//gsoap ns1  service method-output-action:	CheckTimeGap Response
int __ns1__CheckTimeGap(
    _ns1__CheckTimeGap*                 ns1__CheckTimeGap,	///< Input parameter
    _ns1__CheckTimeGapResponse         &ns1__CheckTimeGapResponse	///< Output parameter
);

/**

@page BlakeTestServiceHttpBinding Binding "BlakeTestServiceHttpBinding"

@section BlakeTestServiceHttpBinding_policy_enablers Policy Enablers of Binding "BlakeTestServiceHttpBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://xfire.zxw"

  - <ns1:SnSaveTechProcess> @ref _ns1__SnSaveTechProcess
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SnSaveTechProcess(struct soap*, _ns1__SnSaveTechProcess*);
    @endcode

  - <ns1:SnSaveTechProcessResponse> @ref _ns1__SnSaveTechProcessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SnSaveTechProcessResponse(struct soap*, _ns1__SnSaveTechProcessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SnSaveTechProcessResponse(struct soap*, _ns1__SnSaveTechProcessResponse*);
    @endcode

  - <ns1:bindAssembly> @ref _ns1__bindAssembly
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__bindAssembly(struct soap*, _ns1__bindAssembly*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__bindAssembly(struct soap*, _ns1__bindAssembly*);
    @endcode

  - <ns1:bindAssemblyResponse> @ref _ns1__bindAssemblyResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__bindAssemblyResponse(struct soap*, _ns1__bindAssemblyResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__bindAssemblyResponse(struct soap*, _ns1__bindAssemblyResponse*);
    @endcode

  - <ns1:loadTimeControlData> @ref _ns1__loadTimeControlData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__loadTimeControlData(struct soap*, _ns1__loadTimeControlData*);
    @endcode

  - <ns1:loadTimeControlDataResponse> @ref _ns1__loadTimeControlDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__loadTimeControlDataResponse(struct soap*, _ns1__loadTimeControlDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__loadTimeControlDataResponse(struct soap*, _ns1__loadTimeControlDataResponse*);
    @endcode

  - <ns1:loadNgPanelNo> @ref _ns1__loadNgPanelNo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__loadNgPanelNo(struct soap*, _ns1__loadNgPanelNo*);
    @endcode

  - <ns1:loadNgPanelNoResponse> @ref _ns1__loadNgPanelNoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__loadNgPanelNoResponse(struct soap*, _ns1__loadNgPanelNoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__loadNgPanelNoResponse(struct soap*, _ns1__loadNgPanelNoResponse*);
    @endcode

  - <ns1:checkSNOrderNo> @ref _ns1__checkSNOrderNo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkSNOrderNo(struct soap*, _ns1__checkSNOrderNo*);
    @endcode

  - <ns1:checkSNOrderNoResponse> @ref _ns1__checkSNOrderNoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkSNOrderNoResponse(struct soap*, _ns1__checkSNOrderNoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkSNOrderNoResponse(struct soap*, _ns1__checkSNOrderNoResponse*);
    @endcode

  - <ns1:checkSNPangusOrderNo> @ref _ns1__checkSNPangusOrderNo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkSNPangusOrderNo(struct soap*, _ns1__checkSNPangusOrderNo*);
    @endcode

  - <ns1:checkSNPangusOrderNoResponse> @ref _ns1__checkSNPangusOrderNoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkSNPangusOrderNoResponse(struct soap*, _ns1__checkSNPangusOrderNoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkSNPangusOrderNoResponse(struct soap*, _ns1__checkSNPangusOrderNoResponse*);
    @endcode

  - <ns1:SnSaveTechProcess_A> @ref _ns1__SnSaveTechProcess_USCOREA
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SnSaveTechProcess_USCOREA(struct soap*, _ns1__SnSaveTechProcess_USCOREA*);
    @endcode

  - <ns1:SnSaveTechProcess_AResponse> @ref _ns1__SnSaveTechProcess_USCOREAResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, _ns1__SnSaveTechProcess_USCOREAResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SnSaveTechProcess_USCOREAResponse(struct soap*, _ns1__SnSaveTechProcess_USCOREAResponse*);
    @endcode

  - <ns1:staffCheck> @ref _ns1__staffCheck
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__staffCheck(struct soap*, _ns1__staffCheck*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__staffCheck(struct soap*, _ns1__staffCheck*);
    @endcode

  - <ns1:staffCheckResponse> @ref _ns1__staffCheckResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__staffCheckResponse(struct soap*, _ns1__staffCheckResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__staffCheckResponse(struct soap*, _ns1__staffCheckResponse*);
    @endcode

  - <ns1:getAssemblyData> @ref _ns1__getAssemblyData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAssemblyData(struct soap*, _ns1__getAssemblyData*);
    @endcode

  - <ns1:getAssemblyDataResponse> @ref _ns1__getAssemblyDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getAssemblyDataResponse(struct soap*, _ns1__getAssemblyDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getAssemblyDataResponse(struct soap*, _ns1__getAssemblyDataResponse*);
    @endcode

  - <ns1:InsertPRateData> @ref _ns1__InsertPRateData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InsertPRateData(struct soap*, _ns1__InsertPRateData*);
    @endcode

  - <ns1:InsertPRateDataResponse> @ref _ns1__InsertPRateDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InsertPRateDataResponse(struct soap*, _ns1__InsertPRateDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InsertPRateDataResponse(struct soap*, _ns1__InsertPRateDataResponse*);
    @endcode

  - <ns1:blakeTestExchangeData1> @ref _ns1__blakeTestExchangeData1
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__blakeTestExchangeData1(struct soap*, _ns1__blakeTestExchangeData1*);
    @endcode

  - <ns1:blakeTestExchangeData1Response> @ref _ns1__blakeTestExchangeData1Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__blakeTestExchangeData1Response(struct soap*, _ns1__blakeTestExchangeData1Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__blakeTestExchangeData1Response(struct soap*, _ns1__blakeTestExchangeData1Response*);
    @endcode

  - <ns1:InsertTimeControl> @ref _ns1__InsertTimeControl
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InsertTimeControl(struct soap*, _ns1__InsertTimeControl*);
    @endcode

  - <ns1:InsertTimeControlResponse> @ref _ns1__InsertTimeControlResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__InsertTimeControlResponse(struct soap*, _ns1__InsertTimeControlResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__InsertTimeControlResponse(struct soap*, _ns1__InsertTimeControlResponse*);
    @endcode

  - <ns1:checkMac> @ref _ns1__checkMac
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkMac(struct soap*, _ns1__checkMac*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkMac(struct soap*, _ns1__checkMac*);
    @endcode

  - <ns1:checkMacResponse> @ref _ns1__checkMacResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkMacResponse(struct soap*, _ns1__checkMacResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkMacResponse(struct soap*, _ns1__checkMacResponse*);
    @endcode

  - <ns1:getMaintanceParm> @ref _ns1__getMaintanceParm
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMaintanceParm(struct soap*, _ns1__getMaintanceParm*);
    @endcode

  - <ns1:getMaintanceParmResponse> @ref _ns1__getMaintanceParmResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__getMaintanceParmResponse(struct soap*, _ns1__getMaintanceParmResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__getMaintanceParmResponse(struct soap*, _ns1__getMaintanceParmResponse*);
    @endcode

  - <ns1:fetchSnCurrentLocation> @ref _ns1__fetchSnCurrentLocation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__fetchSnCurrentLocation(struct soap*, _ns1__fetchSnCurrentLocation*);
    @endcode

  - <ns1:fetchSnCurrentLocationResponse> @ref _ns1__fetchSnCurrentLocationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__fetchSnCurrentLocationResponse(struct soap*, _ns1__fetchSnCurrentLocationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__fetchSnCurrentLocationResponse(struct soap*, _ns1__fetchSnCurrentLocationResponse*);
    @endcode

  - <ns1:goNewRouteseq> @ref _ns1__goNewRouteseq
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__goNewRouteseq(struct soap*, _ns1__goNewRouteseq*);
    @endcode

  - <ns1:goNewRouteseqResponse> @ref _ns1__goNewRouteseqResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__goNewRouteseqResponse(struct soap*, _ns1__goNewRouteseqResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__goNewRouteseqResponse(struct soap*, _ns1__goNewRouteseqResponse*);
    @endcode

  - <ns1:blakeTestExchangeData> @ref _ns1__blakeTestExchangeData
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__blakeTestExchangeData(struct soap*, _ns1__blakeTestExchangeData*);
    @endcode

  - <ns1:blakeTestExchangeDataResponse> @ref _ns1__blakeTestExchangeDataResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__blakeTestExchangeDataResponse(struct soap*, _ns1__blakeTestExchangeDataResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__blakeTestExchangeDataResponse(struct soap*, _ns1__blakeTestExchangeDataResponse*);
    @endcode

  - <ns1:checkingSNNextRoute> @ref _ns1__checkingSNNextRoute
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkingSNNextRoute(struct soap*, _ns1__checkingSNNextRoute*);
    @endcode

  - <ns1:checkingSNNextRouteResponse> @ref _ns1__checkingSNNextRouteResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__checkingSNNextRouteResponse(struct soap*, _ns1__checkingSNNextRouteResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__checkingSNNextRouteResponse(struct soap*, _ns1__checkingSNNextRouteResponse*);
    @endcode

  - <ns1:Ispasspostburnin> @ref _ns1__Ispasspostburnin
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Ispasspostburnin(struct soap*, _ns1__Ispasspostburnin*);
    @endcode

  - <ns1:IspasspostburninResponse> @ref _ns1__IspasspostburninResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__IspasspostburninResponse(struct soap*, _ns1__IspasspostburninResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__IspasspostburninResponse(struct soap*, _ns1__IspasspostburninResponse*);
    @endcode

  - <ns1:CheckTimeGap> @ref _ns1__CheckTimeGap
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckTimeGap(struct soap*, _ns1__CheckTimeGap*);
    @endcode

  - <ns1:CheckTimeGapResponse> @ref _ns1__CheckTimeGapResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__CheckTimeGapResponse(struct soap*, _ns1__CheckTimeGapResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__CheckTimeGapResponse(struct soap*, _ns1__CheckTimeGapResponse*);
    @endcode

*/

/* End of WebService.h */
